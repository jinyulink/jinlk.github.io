<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2017-2018 ACM-ICPC, NEERC, Southern Subregional Contest, qualification stage</title>
    <link href="/2022/09/25/icpc847/"/>
    <url>/2022/09/25/icpc847/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>這次團練，有點慘，很多題目不算難，但一直卡test，前面還進行挺順利，一小時ac了三題，後面就全部wa…，我的基礎功屬實還差人家很多啊，在一個禮拜就ncpc初賽了，把基礎的算法熟悉一遍，希望能先通過初賽吧。</p><p>賽中AC: A G M (簽到題 G M)<br />賽後補題: B C E F H I</p><p><a href="https://codeforces.com/contest/847">題目連結</a></p><h2 id="a-union-of-doubly-linked-lists"><a class="markdownIt-Anchor" href="#a-union-of-doubly-linked-lists"></a> A. Union of Doubly Linked Lists</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e2</span>+<span class="hljs-number">10</span>;<br>ll n,start,now,z=<span class="hljs-number">-1</span>,l[MAXN],r[MAXN]; <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    <span class="hljs-built_in">cin</span>&gt;&gt;l[i]&gt;&gt;r[i];<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    <span class="hljs-keyword">if</span>(!l[i])   &#123;start=i;<span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    <span class="hljs-keyword">if</span>(!l[i])   z++;<br>    now=start;<br>    <span class="hljs-keyword">while</span>(z)<br>    &#123;<br>        <span class="hljs-comment">// cout&lt;&lt;&#x27;\n&#x27;&lt;&lt;now&lt;&lt;&#x27;\n&#x27;;</span><br>        <span class="hljs-keyword">if</span>(!r[now])<br>        &#123;<br>            <span class="hljs-comment">// cout&lt;&lt;&quot;\n**&quot;&lt;&lt;r[now]&lt;&lt;&#x27;\n&#x27;;</span><br>            <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!l[i]&amp;&amp;i!=start)<br>                &#123;<br>                    r[now]=i;<br>                    l[i]=now;<br>                    z--;<br>                    now=i;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>    now=r[now];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    <span class="hljs-built_in">cout</span>&lt;&lt;l[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;r[i]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b-preparing-for-merge-sort"><a class="markdownIt-Anchor" href="#b-preparing-for-merge-sort"></a> B. Preparing for Merge Sort</h2><p>賽中想到<code>O(n^2)</code>的作法，想說會爆就沒實作，沒想到那個<code>n</code>可以用二分直接查找，這樣就降到<code>O(nlogn)</code>，害</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br>ll n,a[MAXN],tmp;<br>vt&lt;ll&gt; ans[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    ans[<span class="hljs-number">0</span>].pb(a[tmp]);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        ll l=<span class="hljs-number">0</span>,r=tmp;<br>        <span class="hljs-keyword">if</span>(ans[tmp].back()&gt;a[i])<br>        &#123;<br>            ans[++tmp].pb(a[i]);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            ll mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(ans[mid].back()&lt;a[i])    r=mid;<br>            <span class="hljs-keyword">else</span>    l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        ans[l].pb(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:ans)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j:i)  <span class="hljs-built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c-sum-of-nestings"><a class="markdownIt-Anchor" href="#c-sum-of-nestings"></a> C. Sum of Nestings</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">// 參考別隊大老寫的</span><br><span class="hljs-comment">// 這程式好簡潔阿</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll n,k;<br><span class="hljs-built_in">string</span> ans;<br><span class="hljs-function">ll <span class="hljs-title">sum</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x*x-x)/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">if</span>(sum(n)&lt;k)<br>    &#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ll cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>*n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(cnt&lt;=k)<br>        &#123;<br>            k-=cnt;<br>            ans+=<span class="hljs-string">&#x27;(&#x27;</span>;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans+=<span class="hljs-string">&#x27;)&#x27;</span>;<br>            cnt--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g-university-classes"><a class="markdownIt-Anchor" href="#g-university-classes"></a> G. University Classes</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">string</span> a[<span class="hljs-number">1005</span>];<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span> ;j&lt;n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(a[j][i] == <span class="hljs-string">&#x27;1&#x27;</span>) x++;<br>        &#125;<br>        ans = max (ans, x);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h-load-testing"><a class="markdownIt-Anchor" href="#h-load-testing"></a> H. Load Testing</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n,a[MAXN],l[MAXN],r[MAXN],ans;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    ll pre=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        pre=max(pre+<span class="hljs-number">1</span>,a[i]);<br>        l[i]=pre;<br>    &#125;<br>    pre=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(ll i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        pre=max(pre+<span class="hljs-number">1</span>,a[i]);<br>        r[i]=pre;<br>    &#125;<br>    pre=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        ll now=min(l[i],r[i]);<br>        <span class="hljs-keyword">if</span>(now==pre)    ans++;<br>        ans+=(now-a[i]);<br>        pre=now;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="i-noise-level"><a class="markdownIt-Anchor" href="#i-noise-level"></a> I. Noise Level</h2><p>對每個噪音點<code>bfs</code>，然後計算到某種程度後(如果離噪音點超過幾十格 可以直接不算)，要<code>break</code>掉，不然會有很噁心的側資(每個點都是噪音點)卡你<code>tle</code>。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//bfs</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll,ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fs first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">250</span>+<span class="hljs-number">10</span>;<br>ll n,m,qq,p,ans;<br>ll en[MAXN][MAXN];<br><span class="hljs-keyword">char</span> e[MAXN][MAXN];<br>vt&lt;pll&gt; noise;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;qq&gt;&gt;p;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;m;j++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;e[i][j];<br>            <span class="hljs-keyword">if</span>(e[i][j]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;<span class="hljs-string">&#x27;Z&#x27;</span>&gt;=e[i][j])<br>            &#123;<br>                noise.pb(&#123;i,j&#125;);<br>                en[i][j]=(e[i][j]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">1</span>)*qq;<br>                <span class="hljs-comment">// cout&lt;&lt;en[i][j]&lt;&lt;&quot; &quot;;</span><br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> ii:noise)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> vis[n][m];<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;pll,ll&gt;&gt; q;<br>        q.push(&#123;ii,<span class="hljs-number">1</span>&#125;);<br>        ll dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">while</span>(!q.empty())<br>        &#123;<br>            ll tmp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">auto</span> t=q.front();<br>            q.pop();<br>            vis[t.fs.fs][t.fs.sc]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(t.sc&gt;<span class="hljs-number">32</span>)<br>                &#123;<br>                    tmp=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                ll x=t.fs.fs+dx[i],y=t.fs.sc+dy[i];<br>                <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&lt;m)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(e[x][y]!=<span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp;!vis[x][y])<br>                    &#123;<br>                        <span class="hljs-comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot;+&quot;&lt;&lt;qq*(e[ii.fs][ii.sc]-&#x27;A&#x27;+1)/(t.sc*2)&lt;&lt;&#x27;\n&#x27;;</span><br>                        <span class="hljs-keyword">if</span>(t.sc&lt;<span class="hljs-number">32</span>) en[x][y]+=qq*(e[ii.fs][ii.sc]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">1</span>)&gt;&gt;t.sc;<br>                        q.push(&#123;&#123;x,y&#125;,t.sc+<span class="hljs-number">1</span>&#125;);<br>                        vis[x][y]=<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(tmp) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;m;j++)<br>        &#123;<br>            <span class="hljs-comment">// cout&lt;&lt;en[i][j]&lt;&lt;&quot; &quot;;</span><br>            <span class="hljs-keyword">if</span>(en[i][j]&gt;p)  ans++;<br>        &#125;<br>        <span class="hljs-comment">// cout&lt;&lt;&#x27;\n&#x27;;</span><br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="m-weather-tomorrow"><a class="markdownIt-Anchor" href="#m-weather-tomorrow"></a> M. Weather Tomorrow</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n, a[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">int</span> d = a[<span class="hljs-number">1</span>]-a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]+d != a[i+<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;a[n<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;a[n<span class="hljs-number">-1</span>]+d;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>icpc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>icpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轉系心得</title>
    <link href="/2022/09/24/transfercsie/"/>
    <url>/2022/09/24/transfercsie/</url>
    
    <content type="html"><![CDATA[<p>總算是來到資工系了，一路上太坎坷了，但也怪自己當初不夠努力(?，雖說是坎坷，但我認為自己受了很多人幫忙，才讓我學測時能備上資管APCS組，現在又能轉系成功。</p><p>今年資工名額開比較多，從資管轉到資工的就有七個，七個裡面有拿書卷的，有搞資安比賽的，有當計中網管的，有參加開放社群的，而我一個也沒有@@，我的大一上成績班排剛好壓線第五名，但也許我的CPE有加一點分(?，總之，厲害的人真的好多，資管資工都一堆大老，真的很幸運能轉過來。</p><p>接下來，新學期 新系，還是希望成績能衝前面一點，然後icpc銅牌(?夢幻目標，持續刷題(認識資工系的高一就在刷leetcode@@ 現在已經200題了 好鬼，最後趕快找到專題教授，雖然我才剛轉來資工系，根本不知道要走什麼領域…，但資工大二有人剛開學就已經先預約好教授了…，總之，路還長著，希望自己能夠好好努力，不要再讓自己後悔了。</p><p>– By 對未來非常迷茫的 Jin</p>]]></content>
    
    
    <categories>
      
      <category>心得</category>
      
    </categories>
    
    
    <tags>
      
      <tag>轉系</tag>
      
      <tag>心得</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Cyclic Components (dsu)</title>
    <link href="/2022/09/23/cf977e/"/>
    <url>/2022/09/23/cf977e/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/977/problem/E">題目連結</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given an undirected graph consisting of n vertices and m edges. Your task is to find the number of connected components which are cycles.</p><p>Here are some definitions of graph theory.</p><p>An undirected graph consists of two sets: set of nodes (called vertices) and set of edges. Each edge connects a pair of vertices. All edges are bidirectional (i.e. if a vertex a is connected with a vertex b, a vertex b is also connected with a vertex a). An edge can’t connect vertex with itself, there is at most one edge between a pair of vertices.</p><p>Two vertices u and v belong to the same connected component if and only if there is at least one path along edges connecting u and v.</p><p>A connected component is a cycle if and only if its vertices can be reordered in such a way that:</p><ul><li>the first vertex is connected with the second vertex by an edge,</li><li>the second vertex is connected with the third vertex by an edge,</li><li>…</li><li>the last vertex is connected with the first vertex by an edge,</li><li>all the described edges of a cycle are distinct.</li></ul><p>A cycle doesn’t contain any other edges except described above. By definition any cycle contains three or more vertices.</p><p><img src="https://espresso.codeforces.com/69828f4d3554b0093ff12f1466d664d757de7a79.png" alt="" /><br />There are 6 connected components, 2 of them are cycles: [7,10,16] and [5,11,9,15].<br /><strong>Input</strong><br />The first line contains two integer numbers n and m (1≤n≤2e5, 0≤m≤2e5) — number of vertices and edges.<br />The following m lines contains edges: edge i is given as a pair of vertices vi, ui (1≤vi,ui≤n, ui≠vi). There is no multiple edges in the given graph, i.e. for each pair (vi,ui) there no other pairs (vi,ui) and (ui,vi) in the list of edges.<br /><strong>Output</strong><br />Print one integer — the number of connected components which are also cycles.<br /><strong>Example</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">17 </span><span class="hljs-number">15</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">12</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">11</span><br><span class="hljs-symbol">11 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">15</span><br><span class="hljs-symbol">15 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">13</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">13</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">16</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">16 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">14 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">14 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">17 </span><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br></code></pre></div></td></tr></table></figure><h2 id="題意"><a class="markdownIt-Anchor" href="#題意"></a> 題意</h2><p>給你無向圖，判斷有幾個環。</p><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>用<code>dsu</code>分好區域，判斷每個區域的每個點<code>度數</code>是否都為<code>2</code>，如果是的話就是環。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br>ll n,m,ans,p[MAXN],in[MAXN];<br>vt&lt;ll&gt; c[MAXN]; <span class="hljs-comment">//component</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++) p[i]=i;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">find</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_set</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    p[find(a)]=find(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    init();<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>,a,b;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        in[a]++; in[b]++; <span class="hljs-comment">//度數</span><br>        merge_set(a,b);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    c[find(i)].pb(i);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> tmp=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;c[i].size();j++)<br>            <span class="hljs-keyword">if</span>(in[c[i][j]]!=<span class="hljs-number">2</span>)<br>            &#123;<br>                tmp=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(tmp&amp;&amp;c[i].size()) ans++;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>dsu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpnote</title>
    <link href="/2022/09/23/cpnote1/"/>
    <url>/2022/09/23/cpnote1/</url>
    
    <content type="html"><![CDATA[<h2 id="merge-sort"><a class="markdownIt-Anchor" href="#merge-sort"></a> Merge sort</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">// merge sort</span><br><span class="hljs-comment">// 分治 合併</span><br><span class="hljs-comment">// O(nlogn)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br>ll n,q[MAXN];<br>ll tmp[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(ll q[],ll l,ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)    <span class="hljs-keyword">return</span>;<br>    ll mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    merge_sort(q,l,mid),merge_sort(q,mid+<span class="hljs-number">1</span>,r); <span class="hljs-comment">//分治</span><br>    ll k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r) <span class="hljs-comment">//以下合併</span><br>        <span class="hljs-keyword">if</span>(q[i]&lt;=q[j])  tmp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span>    tmp[k++]=q[j++];<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)   tmp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];<br><br>    <span class="hljs-keyword">for</span>(i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)    q[i]=tmp[j];<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n; <span class="hljs-comment">// n個元素</span><br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;q[i];<br>    merge_sort(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cout</span>&lt;&lt;q[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="逆序數對"><a class="markdownIt-Anchor" href="#逆序數對"></a> 逆序數對</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n,q[MAXN];<br>ll tmp[MAXN];<br><span class="hljs-function">ll <span class="hljs-title">merge_sort</span><span class="hljs-params">(ll l,ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    ll mid = l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    ll res=merge_sort(l,mid)+merge_sort(mid+<span class="hljs-number">1</span>,r);<br>    ll k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)<br>        <span class="hljs-keyword">if</span>(q[i]&lt;=q[j])  tmp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tmp[k++]=q[j++];<br>            res+=mid-i+<span class="hljs-number">1</span>;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)   tmp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];<br>    <span class="hljs-keyword">for</span>(ll i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)    q[i]=tmp[j];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;q[i];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;merge_sort(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function">ll <span class="hljs-title">binary_search1</span><span class="hljs-params">(ll l,ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        ll mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(check(mid))  r=mid;<br>        <span class="hljs-keyword">else</span>    l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">binary_search2</span><span class="hljs-params">(ll l,ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        ll mid=l+r+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-comment">//當l=mid 就要+1</span><br>        <span class="hljs-keyword">if</span>(check(mid)) l=mid;<br>        <span class="hljs-keyword">else</span>    r=mid<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="dsu"><a class="markdownIt-Anchor" href="#dsu"></a> DSU</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    p[i]=i;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">union_set</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    p[find(a)]=find(b);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> dfs</h2>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - White-Black Balanced Subtrees (dfs)</title>
    <link href="/2022/09/22/cf1676g/"/>
    <url>/2022/09/22/cf1676g/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1676/G">題目連結</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given a rooted tree consisting of n vertices numbered from 1 to n. The root is vertex 1. There is also a string s denoting the color of each vertex: if si=B, then vertex i is black, and if si=W, then vertex i is white.</p><p>A subtree of the tree is called balanced if the number of white vertices equals the number of black vertices. Count the number of balanced subtrees.</p><p>A tree is a connected undirected graph without cycles. A rooted tree is a tree with a selected vertex, which is called the root. In this problem, all trees have root 1.</p><p>The tree is specified by an array of parents a2,…,an containing n−1 numbers: ai is the parent of the vertex with the number i for all i=2,…,n. The parent of a vertex u is a vertex that is the next vertex on a simple path from u to the root.</p><p>The subtree of a vertex u is the set of all vertices that pass through u on a simple path to the root. For example, in the picture below, 7 is in the subtree of 3 because the simple path 7→5→3→1 passes through 3. Note that a vertex is included in its subtree, and the subtree of the root is the entire tree.<br /><img src="https://espresso.codeforces.com/8c1febaf1c81cdd195e3c3599b9900b7e37baf5c.png" alt="" /><br />The picture shows the tree for n=7, a=[1,1,2,3,3,5], and s=WBBWWBW. The subtree at the vertex 3 is balanced.</p><p><strong>Input</strong><br />The first line of input contains an integer t (1≤t≤1e4) — the number of test cases.</p><p>The first line of each test case contains an integer n (2≤n≤4000) — the number of vertices in the tree.</p><p>The second line of each test case contains n−1 integers a2,…,an (1≤ai&lt;i) — the parents of the vertices 2,…,n.</p><p>The third line of each test case contains a string s of length n consisting of the characters B and W — the coloring of the tree.</p><p>It is guaranteed that the sum of the values n over all test cases does not exceed 2⋅1e5.</p><p><strong>Output</strong><br />For each test case, output a single integer — the number of balanced subtrees.</p><p><strong>Example</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">3</span><br><span class="hljs-attribute">7</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">WBBWWBW</span><br><span class="hljs-attribute">2</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">BW</span><br><span class="hljs-attribute">8</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">BWBWBWBW</span><br></code></pre></div></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">2<br>1<br>4<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p><strong>dfs</strong>，開一個<code>f</code>二維陣列，<code>f[i][0]</code>為以i為根的子樹中黑色節點數，<code>f[i][1]</code>為以i為根的子樹中白色節點數，最後判斷<code>f[i][0] == f[i][1]</code>，如果相等，則<code>ans++</code>。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">4e3</span>+<span class="hljs-number">10</span>;<br>ll t,n,ans,f[MAXN][<span class="hljs-number">2</span>]; <span class="hljs-comment">// f[i][0]=i的子樹組黑點的數量 f[i][1]=i的子樹組白點的數量</span><br>vt&lt;ll&gt; e[MAXN];<br><span class="hljs-built_in">string</span> s;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initial</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;=MAXN;i++) e[i].clear();<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>    ans=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(s[x<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;B&#x27;</span>)   f[x][<span class="hljs-number">0</span>]++;<br>    <span class="hljs-keyword">else</span>    f[x][<span class="hljs-number">1</span>]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:e[x])<br>    &#123;<br>        dfs(y);<br>        f[x][<span class="hljs-number">0</span>]+=f[y][<span class="hljs-number">0</span>];<br>        f[x][<span class="hljs-number">1</span>]+=f[y][<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f[x][<span class="hljs-number">0</span>]==f[x][<span class="hljs-number">1</span>])    ans++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        initial();<br>        <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>        &#123;<br>            ll x; <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>            e[x].pb(i); <span class="hljs-comment">//x的兒子是i</span><br>        &#125;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;s;<br>        dfs(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="參考"><a class="markdownIt-Anchor" href="#參考"></a> 參考</h2><p><a href="https://www.bilibili.com/video/BV1c34y1a7DH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d56494e884bbff85cb781c97e8df18a3">Bilibili</a></p>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程式設計研討專題 - Week 1</title>
    <link href="/2022/09/16/cp_course1/"/>
    <url>/2022/09/16/cp_course1/</url>
    
    <content type="html"><![CDATA[<h1 id="uva-459-graph-connectivity"><a class="markdownIt-Anchor" href="#uva-459-graph-connectivity"></a> UVA 459 - Graph Connectivity</h1><p><a href="https://vjudge.net/problem/UVA-459">題目連結</a></p><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p><strong>並查集</strong>模板題，加上紀錄連通快數量。<br />題外話: 被這題的輸出格式搞好久@@，每筆輸出中間要隔一行，一開始沒看到，一直卡<code>Presentation Error</code>。</p><ul><li>初始化</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">ll p[MAXN];<br><span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;p.length();i++)    p[i]=i;<br></code></pre></div></td></tr></table></figure><ul><li>查找</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function">ll <span class="hljs-title">find</span><span class="hljs-params">(ll x)</span> <span class="hljs-comment">//查找 + 路徑壓縮</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>合併</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">p[find(a)]=find(b)<br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">// 程式設計研討專題 Week 1</span><br><span class="hljs-comment">// UVA 459 Graph Connectivity</span><br><span class="hljs-comment">// Disjoint Set Union</span><br><span class="hljs-comment">// 2022/09/21</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">30</span>;<br>ll t,sz,p[MAXN];<br><span class="hljs-built_in">string</span> s;<br><span class="hljs-built_in">set</span>&lt;ll&gt; ans;<br><span class="hljs-keyword">bool</span> blank_line;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initial</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ans.clear();<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;sz;i++)    p[i]=i;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">find</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">union_set</span><span class="hljs-params">(<span class="hljs-keyword">char</span> a,<span class="hljs-keyword">char</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    p[find(a-<span class="hljs-string">&#x27;A&#x27;</span>)]=find(b-<span class="hljs-string">&#x27;A&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(blank_line)  <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        blank_line=<span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;s;<br>        sz=s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">1</span>;<br>        initial();<br>        <span class="hljs-built_in">cin</span>.ignore();<br>        <span class="hljs-keyword">while</span>(getline(<span class="hljs-built_in">cin</span>,s)&amp;&amp;!s.empty())<br>            union_set(s[<span class="hljs-number">0</span>],s[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;sz;i++)    ans.insert(find(p[i]));<br>        <span class="hljs-built_in">cout</span>&lt;&lt;ans.size()&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <br></code></pre></div></td></tr></table></figure><h1 id="uva-10324-zeros-and-ones"><a class="markdownIt-Anchor" href="#uva-10324-zeros-and-ones"></a> UVA 10324 Zeros and Ones</h1><p><a href="https://vjudge.net/problem/UVA-10324">題目連結</a></p><h2 id="想法-2"><a class="markdownIt-Anchor" href="#想法-2"></a> 想法</h2><p>用前綴和，如果<code>a~b</code>區間的和為<code>0</code>或<code>b-a+1</code>，則答案為<code>Yes</code>。</p><h2 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">// 程式設計研究專題 Week 1</span><br><span class="hljs-comment">// UVA 10324 Zeros and Ones</span><br><span class="hljs-comment">// Prefix Sum</span><br><span class="hljs-comment">// 2022/09/21</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN= <span class="hljs-number">1e7</span>+<span class="hljs-number">10</span>;<br><span class="hljs-built_in">string</span> s;<br>ll t,a,b,p[MAXN],cnt=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">bool</span> ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initial</span><span class="hljs-params">()</span> <span class="hljs-comment">//prefix sum</span></span><br><span class="hljs-function"></span>&#123;<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=s.length();i++)    p[i]=p[i<span class="hljs-number">-1</span>]+(s[i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Case &quot;</span>&lt;&lt;cnt++&lt;&lt;<span class="hljs-string">&quot;:\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;s)<br>    &#123;<br>        initial();<br>        <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>        <span class="hljs-keyword">while</span>(t--)<br>        &#123;<br>            ans=<span class="hljs-literal">false</span>;<br>            <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>            <span class="hljs-keyword">if</span>(a&gt;b) swap(a,b);<br>            <span class="hljs-keyword">if</span>((p[b+<span class="hljs-number">1</span>]-p[a])==<span class="hljs-number">0</span>||(p[b+<span class="hljs-number">1</span>]-p[a])==(b-a+<span class="hljs-number">1</span>))    ans=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(ans) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Yes\n&quot;</span>;<br>            <span class="hljs-keyword">else</span>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;No\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>程式設計研討專題</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dsu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 300 - Longest Increasing Subsequence (一維dp)</title>
    <link href="/2022/09/13/leetcode300/"/>
    <url>/2022/09/13/leetcode300/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-increasing-subsequence/">題目</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Given an integer array nums, return the length of the longest strictly increasing subsequence.</p><p>A <strong>subsequence</strong> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p><p><strong>Example 1</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">101</span>,<span class="hljs-number">18</span>]<br><span class="hljs-symbol">Output:</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">Explanation:</span> The longest increasing subsequence <span class="hljs-built_in">is</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">101</span>], therefore the length <span class="hljs-built_in">is</span> <span class="hljs-number">4</span>.<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [0,1,0,3,2,3]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>1 &lt;= nums.length &lt;= 2500</li><li>-1e4 &lt;= nums[i] &lt;= 1e4</li></ul><h2 id="想法-1"><a class="markdownIt-Anchor" href="#想法-1"></a> 想法 1</h2><ul><li>time complexity: <code>O(n^2)</code></li></ul><h2 id="code-1"><a class="markdownIt-Anchor" href="#code-1"></a> code 1</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> dp[nums.size()];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)  dp[i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> tmp=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[i]&gt;nums[j])<br>                &#123;<br>                    tmp=max(tmp,dp[i]+dp[j]);<br>                &#125;<br>            &#125;<br>            dp[i]=tmp;<br>            res=max(res,dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="想法-2"><a class="markdownIt-Anchor" href="#想法-2"></a> 想法 2</h2><ul><li>time complexity: <code>O(n log(n))</code></li></ul><h2 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> code 2</h2>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>medium</tag>
      
      <tag>一維dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 198 - House Robber II (一維dp)</title>
    <link href="/2022/09/13/leetcode213/"/>
    <url>/2022/09/13/leetcode213/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber-ii">題目</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p><p><strong>Example 1</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [2,3,2]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">Explanation</span>: You cannot rob house <span class="hljs-number">1</span> (money = <span class="hljs-number">2</span>) and then rob house <span class="hljs-number">3</span> (money = <span class="hljs-number">2</span>), because they are adjacent houses.<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [1,2,3,1]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">Explanation</span>: Rob house <span class="hljs-number">1</span> (money = <span class="hljs-number">1</span>) and then rob house <span class="hljs-number">3</span> (money = <span class="hljs-number">3</span>).<br><span class="hljs-attribute">Total</span> amount you can rob = <span class="hljs-number">1</span> + <span class="hljs-number">3</span> = <span class="hljs-number">4</span>.<br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>1 &lt;= nums.length &lt;= 100</li><li>0 &lt;= nums[i] &lt;= 1000</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>跟<a href="/2022/09/13/leetcode198/">House Robber</a>差在這題是圍成圓形。<br />圍成圓形表示頭尾相連，表示頭跟尾不能同時被打劫。</p><ol><li>算沒有打劫<code>頭</code>的最佳解。</li><li>算沒有打劫<code>尾</code>的最佳解。</li><li>比較上述兩個誰較大。</li></ol><ul><li>time complexity: <code>O(n)</code> / 實際: <code>0ms</code></li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans,dp[nums.size()];<br>        <span class="hljs-keyword">if</span>(nums.size()==<span class="hljs-number">1</span>)  <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>,dp[<span class="hljs-number">1</span>]=nums[<span class="hljs-number">1</span>]; <span class="hljs-comment">//沒有頭</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;nums.size();i++) <span class="hljs-comment">//沒有頭</span><br>            dp[i]=max(dp[i<span class="hljs-number">-2</span>]+nums[i],dp[i<span class="hljs-number">-1</span>]); <span class="hljs-comment">//沒有頭</span><br>        ans=dp[nums.size()<span class="hljs-number">-1</span>]; <span class="hljs-comment">//沒有頭</span><br>        dp[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>],dp[<span class="hljs-number">1</span>]=max(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]); <span class="hljs-comment">//沒有尾</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;nums.size()<span class="hljs-number">-1</span>;i++) <span class="hljs-comment">//沒有尾</span><br>            dp[i]=max(dp[i<span class="hljs-number">-2</span>]+nums[i],dp[i<span class="hljs-number">-1</span>]); <span class="hljs-comment">//沒有尾</span><br>        ans=max(ans,dp[nums.size()<span class="hljs-number">-2</span>]);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>medium</tag>
      
      <tag>一維dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 198 - House Robber (一維dp)</title>
    <link href="/2022/09/13/leetcode198/"/>
    <url>/2022/09/13/leetcode198/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/house-robber/">題目</a><br /><a href="/2022/09/13/leetcode213/">延伸題 House Robber II</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p><p><strong>Example 1</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [1,2,3,1]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">Explanation</span>: Rob house <span class="hljs-number">1</span> (money = <span class="hljs-number">1</span>) and then rob house <span class="hljs-number">3</span> (money = <span class="hljs-number">3</span>).<br><span class="hljs-attribute">Total</span> amount you can rob = <span class="hljs-number">1</span> + <span class="hljs-number">3</span> = <span class="hljs-number">4</span>.<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [2,7,9,3,1]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">12</span><br><span class="hljs-attribute">Explanation</span>: Rob house <span class="hljs-number">1</span> (money = <span class="hljs-number">2</span>), rob house <span class="hljs-number">3</span> (money = <span class="hljs-number">9</span>) and rob house <span class="hljs-number">5</span> (money = <span class="hljs-number">1</span>).<br><span class="hljs-attribute">Total</span> amount you can rob = <span class="hljs-number">2</span> + <span class="hljs-number">9</span> + <span class="hljs-number">1</span> = <span class="hljs-number">12</span>.<br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>1 &lt;= nums.length &lt;= 100</li><li>0 &lt;= nums[i] &lt;= 400</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>轉移式: <code>dp[i]=max(dp[i-1],dp[i-2]+nums[i]);</code></p><ul><li>time complexity: <code>O(n)</code> / 實際: <code>0ms</code></li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> dp[nums.size()+<span class="hljs-number">1</span>],t=nums.size();<br>        nums.push_back(<span class="hljs-number">0</span>);<br>        dp[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>],dp[<span class="hljs-number">1</span>]=max(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;t;i++)<br>            dp[i]=max(dp[i<span class="hljs-number">-2</span>]+nums[i],dp[i<span class="hljs-number">-1</span>]);<br>        <span class="hljs-keyword">return</span> dp[t<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>medium</tag>
      
      <tag>一維dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 746 - Min Cost Climbing Stairs (一維dp)</title>
    <link href="/2022/09/12/leetcode746/"/>
    <url>/2022/09/12/leetcode746/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/min-cost-climbing-stairs/">題目</a>(easy)<br />為<a href="/2022/08/08/leetcode70/">70. Climbing Stairs</a>的延伸題</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given an integer array cost where <code>cost[i]</code> is the cost of <code>ith</code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p><p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p><p>Return the minimum cost to reach the top of the floor.<br /><strong>Example 1:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: <span class="hljs-keyword">cost</span> = [<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>]<br>Output: <span class="hljs-number">15</span><br>Explanation: You will <span class="hljs-keyword">start</span> at <span class="hljs-keyword">index</span> <span class="hljs-number">1.</span><br>- Pay <span class="hljs-number">15</span> <span class="hljs-keyword">and</span> climb two steps <span class="hljs-keyword">to</span> reach the top.<br>The total <span class="hljs-keyword">cost</span> <span class="hljs-keyword">is</span> <span class="hljs-number">15.</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: <span class="hljs-keyword">cost</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>]<br>Output: <span class="hljs-number">6</span><br>Explanation: You will <span class="hljs-keyword">start</span> at <span class="hljs-keyword">index</span> <span class="hljs-number">0.</span><br>- Pay <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> climb two steps <span class="hljs-keyword">to</span> reach <span class="hljs-keyword">index</span> <span class="hljs-number">2.</span><br>- Pay <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> climb two steps <span class="hljs-keyword">to</span> reach <span class="hljs-keyword">index</span> <span class="hljs-number">4.</span><br>- Pay <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> climb two steps <span class="hljs-keyword">to</span> reach <span class="hljs-keyword">index</span> <span class="hljs-number">6.</span><br>- Pay <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> climb one step <span class="hljs-keyword">to</span> reach <span class="hljs-keyword">index</span> <span class="hljs-number">7.</span><br>- Pay <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> climb two steps <span class="hljs-keyword">to</span> reach <span class="hljs-keyword">index</span> <span class="hljs-number">9.</span><br>- Pay <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> climb one step <span class="hljs-keyword">to</span> reach the top.<br>The total <span class="hljs-keyword">cost</span> <span class="hljs-keyword">is</span> <span class="hljs-number">6.</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>2 &lt;= cost.length &lt;= 1000</li><li>0 &lt;= cost[i] &lt;= 999</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>初始化: <code>dp[0]=0 dp[1]=0 dp[2]=0</code><br />轉移式: <code>dp[i]=min(dp[i-1]+cost[i-2],dp[i-2]+cost[i-3])</code></p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minCostClimbingStairs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> dp[cost.size()+<span class="hljs-number">2</span>];<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>; dp[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>; dp[<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;i&lt;=cost.size()+<span class="hljs-number">1</span>;i++)<br>        &#123;<br>            dp[i]=min(dp[i<span class="hljs-number">-1</span>]+cost[i<span class="hljs-number">-2</span>],dp[i<span class="hljs-number">-2</span>]+cost[i<span class="hljs-number">-3</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[cost.size()+<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>一維dp</tag>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 344 - Reverse String [2-pointers]</title>
    <link href="/2022/09/05/leetcode344/"/>
    <url>/2022/09/05/leetcode344/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-string/">題目連結</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p><p>You must do this by modifying the input array in-place with <code>O(1)</code> extra memory.</p><p><strong>Example 1</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = [<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>]<br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;o&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>]<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight smalltalk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smalltalk"><span class="hljs-type">Input</span>: s = [<span class="hljs-comment">&quot;H&quot;</span>,<span class="hljs-comment">&quot;a&quot;</span>,<span class="hljs-comment">&quot;n&quot;</span>,<span class="hljs-comment">&quot;n&quot;</span>,<span class="hljs-comment">&quot;a&quot;</span>,<span class="hljs-comment">&quot;h&quot;</span>]<br><span class="hljs-type">Output</span>: [<span class="hljs-comment">&quot;h&quot;</span>,<span class="hljs-comment">&quot;a&quot;</span>,<span class="hljs-comment">&quot;n&quot;</span>,<span class="hljs-comment">&quot;n&quot;</span>,<span class="hljs-comment">&quot;a&quot;</span>,<span class="hljs-comment">&quot;H&quot;</span>]<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>反向雙指針</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&amp; s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=s.size()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;j)<br>        &#123;<br>            <span class="hljs-keyword">char</span> tmp=s[i];<br>            s[i++]=s[j];<br>            s[j--]=tmp;t<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>two-pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包問題</title>
    <link href="/2022/09/02/backpack/"/>
    <url>/2022/09/02/backpack/</url>
    
    <content type="html"><![CDATA[<h1 id="01背包"><a class="markdownIt-Anchor" href="#01背包"></a> 01背包</h1><p>有<code>N</code>件物品，一個容量是<code>M</code>的背包，每件物品只能使用一次，第i件物品體積為<code>vi</code>，價值為<code>wi</code>。<br />將那些物品裝進背包，可使物品體積不超過背包容量，且價值總和最大。<br />輸出最大價值。</p><h2 id="二維"><a class="markdownIt-Anchor" href="#二維"></a> 二維</h2><h3 id="轉移式"><a class="markdownIt-Anchor" href="#轉移式"></a> 轉移式</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">dp[i][j]=max(dp[i<span class="hljs-number">-1</span>][j],dp[i<span class="hljs-number">-1</span>][j-v[i]]+w[i]);<br></code></pre></div></td></tr></table></figure><p><code>f[i][j]</code>意思為前<code>i</code>個物品放入體積為<code>j</code>的背包的最大價值。<br />這個轉移式可以理解為:</p><ol><li>第<code>i</code>件不放進去，這時價值為<code>f[i-1][j]</code>。</li><li>第<code>i</code>件放進去，這時價值為<code>f[i-1][j-v[i]]+w[i]</code></li></ol><h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">const</span> ll MAXN=<span class="hljs-number">1e3</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll n,m;<br>ll v[MAXN],w[MAXN];<br>ll res;<br>ll dp[MAXN][MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    <span class="hljs-built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;=m;j++)<br>        &#123;<br>            dp[i][j]=dp[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(j&gt;=v[i])<br>                dp[i][j]=max(dp[i][j],dp[i<span class="hljs-number">-1</span>][j-v[i]]+w[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;=m;i++)   res=max(res,dp[n][i]);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="空間優化一維"><a class="markdownIt-Anchor" href="#空間優化一維"></a> 空間優化(一維)</h2><p><a href="https://blog.csdn.net/weixin_44176696/article/details/105209974">找到的空間優化解釋</a></p><h3 id="轉移式-2"><a class="markdownIt-Anchor" href="#轉移式-2"></a> 轉移式</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">dp[j]=max(dp[j],dp[j-v[i]]+w[i])<br></code></pre></div></td></tr></table></figure><h3 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> code</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">const</span> ll MAXN =<span class="hljs-number">1e3</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll n,m;<br>ll v[MAXN],w[MAXN];<br>ll dp[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    <span class="hljs-built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(ll j=m;j&gt;=v[i];j--)<br>            dp[j]=max(dp[j],dp[j-v[i]]+w[i]);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="例題"><a class="markdownIt-Anchor" href="#例題"></a> 例題</h2><p><a href="https://leetcode.com/problems/partition-equal-subset-sum/">Leetcode 416 Partition Equal Subset Sum</a></p><h1 id="完全背包"><a class="markdownIt-Anchor" href="#完全背包"></a> 完全背包</h1>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>動態規劃</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>背包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 1 - Two Sum [Array]</title>
    <link href="/2022/09/01/leetcode1/"/>
    <url>/2022/09/01/leetcode1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/two-sum/">題目連結</a>(easy)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><p><strong>Example 1</strong></p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog"><span class="hljs-symbol">Input</span>: nums = [<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>], target = <span class="hljs-number">9</span><br><span class="hljs-symbol">Output</span>: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br><span class="hljs-symbol">Explanation</span>: <span class="hljs-symbol">Because</span> nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] == <span class="hljs-number">9</span>, we return [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>].<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], target = <span class="hljs-number">6</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br></code></pre></div></td></tr></table></figure><p><strong>Example 3</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>], target = <span class="hljs-number">6</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>2 &lt;= nums.length &lt;= 1e4</li><li>-1e9 &lt;= nums[i] &lt;= 1e9</li><li>-1e9 &lt;= target &lt;= 1e9</li><li><strong>Only one valid answer exists.</strong></li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>用<code>hashmap</code>紀錄數字是否出現過，可將查找時間降至<code>O(1)</code>，這樣只需要遍歷一次陣列即可。<br />Time complexity: <code>O(n)</code></p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; hashmap;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        vt&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>            hashmap[nums[i]]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(hashmap[target-nums[i]]&amp;&amp;hashmap[target-nums[i]]!=i)<br>            &#123;<br>                ans.pb(i);ans.pb(hashmap[target-nums[i]]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>hash table</tag>
      
      <tag>blind 75</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 153 - Find Minimum in Rotated Sorted Array [Array]</title>
    <link href="/2022/09/01/leetcode153/"/>
    <url>/2022/09/01/leetcode153/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/">題目連結</a>(Medium)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Suppose an array of length n sorted in ascending order is <strong>rotated</strong> between 1 and n times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p><ul><li><code>[4,5,6,7,0,1,2]</code> if it was rotated <code>4</code> times.</li><li><code>[0,1,2,4,5,6,7]</code> if it was rotated <code>7</code> times.<br />Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</li></ul><p>Given the sorted rotated array nums of <strong>unique</strong> elements, return the minimum element of this array.</p><p>You must write an algorithm that runs in <code>O(log n) time</code>.</p><p><strong>Example 1</strong></p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">Input: nums = [3,4,5,1,2]<br>Output: 1<br>Explanation: The original<span class="hljs-built_in"> array </span>was [1,2,3,4,5] rotated 3 times.<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">Input: nums = [4,5,6,7,0,1,2]<br>Output: 0<br>Explanation: The original<span class="hljs-built_in"> array </span>was [0,1,2,4,5,6,7]<span class="hljs-built_in"> and </span>it was rotated 4 times.<br></code></pre></div></td></tr></table></figure><p><strong>Example 3</strong></p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">Input: nums = [11,13,15,17]<br>Output: 11<br>Explanation: The original<span class="hljs-built_in"> array </span>was [11,13,15,17]<span class="hljs-built_in"> and </span>it was rotated 4 times. <br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li><li>All the integers of nums are <strong>unique</strong>.</li><li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>題目說要在<code>O(log n)</code>內完成，應該想到的就是二分。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=nums.size()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(nums[l]&gt;nums[r])<br>        &#123;<br>            <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;nums[r])<br>                l=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <br>                r=mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[l];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>medium</tag>
      
      <tag>blind 75</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 53 - Maximum Subarray [Array]</title>
    <link href="/2022/08/31/leetcode53/"/>
    <url>/2022/08/31/leetcode53/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-subarray/">題目連結</a>(medium)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>A <code>subarray</code> is a <code>contiguous</code> part of an array.</p><p><strong>Example 1</strong></p><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">Input: nums = [<span class="hljs-string">-2</span>,1,<span class="hljs-string">-3</span>,4,<span class="hljs-string">-1</span>,2,1,<span class="hljs-string">-5</span>,4]<br>Output: 6<br>Explanation: [4,<span class="hljs-string">-1</span>,2,1] has the largest sum = 6.<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [1]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 3</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [5,4,-1,7,8]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">23</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>1 &lt;= nums.length &lt;= 1e5</li><li>-1e4 &lt;= nums[i] &lt;= 1e4</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>DP想法，<code>nums[i]=max(nums[i],nums[i]+nums[i-1])</code></p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.size();i++)<br>        &#123;<br>            nums[i]=max(nums[i],nums[i]+nums[i<span class="hljs-number">-1</span>]);<br>            ans=max(ans,nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>medium</tag>
      
      <tag>blind 75</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 238 - Product of Array Except Self [Array]</title>
    <link href="/2022/08/28/leetcode238/"/>
    <url>/2022/08/28/leetcode238/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/product-of-array-except-self/">題目連結</a>(Medium)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Given an integer array <code>nums</code>, return an array <code>answer</code> such that <code>answer[i]</code> is equal to the product of all the elements of nums except <code>nums[i]</code>.</p><p>The product of any prefix or suffix of nums is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p><p>You must write an algorithm that runs in O(n) time and without using the division operation.</p><p><strong>Example 1</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [1,2,3,4]</span><br><span class="hljs-attribute">Output</span>:<span class="hljs-meta"> [24,12,8,6]</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [-1,1,0,-3,3]</span><br><span class="hljs-attribute">Output</span>:<span class="hljs-meta"> [0,0,9,0,0]</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>2 &lt;= nums.length &lt;= 1e5</li><li>-30 &lt;= nums[i] &lt;= 30</li><li>The product of any prefix or suffix of nums is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>先遍歷<code>nums</code>，判斷有幾個0:</p><ol><li>如果有兩個或以上個0，則<code>ans</code>全為0</li><li>如果只有一個0，則除了0之外的元素都是0</li><li>如果沒有0，則<code>ans[i]=num全部乘機/nums[i]</code></li></ol><ul><li><code>time complexity</code> : O(n) / <code>實際</code>: 20ms</li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> check=<span class="hljs-number">0</span>; <span class="hljs-comment">//判斷有幾個0</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">productExceptSelf</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>            <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>)  check++;<br>        <span class="hljs-keyword">if</span>(check&gt;=<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>                ans.push_back(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(check==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> prefix[nums.size()];<br>            prefix[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">if</span>(prefix[<span class="hljs-number">0</span>]==<span class="hljs-number">0</span>)    prefix[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.size();i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>)  prefix[i]=prefix[i<span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">else</span>    prefix[i]=prefix[i<span class="hljs-number">-1</span>]*nums[i];<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>)  ans.push_back(prefix[nums.size()<span class="hljs-number">-1</span>]);<br>                <span class="hljs-keyword">else</span>    ans.push_back(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> prefix[nums.size()];<br>            prefix[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.size();i++)<br>                prefix[i]=prefix[i<span class="hljs-number">-1</span>]*nums[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>                ans.push_back(prefix[nums.size()<span class="hljs-number">-1</span>]/nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>blind 75</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 217 - Contains Duplicate [Array]</title>
    <link href="/2022/08/27/leetcode217/"/>
    <url>/2022/08/27/leetcode217/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/contains-duplicate/">題目連結</a>(easy)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears <strong>at least twice</strong> in the array, and return <code>false</code> if every element is distinct.</p><p><strong>Example 1</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-string">nums</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br><span class="hljs-attr">Output:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-string">nums</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-attr">Output:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 3</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-string">nums</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>]<br><span class="hljs-attr">Output:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>1 &lt;= nums.length &lt;= 1e5</li><li>-1e9 &lt;= nums[i] &lt;= 1e9</li></ul><h2 id="想法-1"><a class="markdownIt-Anchor" href="#想法-1"></a> 想法 1</h2><p>先sort後 再依序遍歷<code>nums</code>陣列，判斷該元素跟前一個是否相同，有相同則返回<code>true</code></p><ul><li><code>time complexity</code> : O(nlogn) / <code>實際</code>: 119ms</li></ul><h2 id="code-1"><a class="markdownIt-Anchor" href="#code-1"></a> code 1</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">containsDuplicate</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        sort(nums.begin(),nums.end());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.size();i++)<br>            <span class="hljs-keyword">if</span>(nums[i]==nums[i<span class="hljs-number">-1</span>])  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="想法-2"><a class="markdownIt-Anchor" href="#想法-2"></a> 想法 2</h2><p>用一個map存</p><ul><li><code>time complexity</code> : O(n) / <code>實際</code>: 92ms</li></ul><h2 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> code 2</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; hashmap;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">containsDuplicate</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)<br>        &#123;<br>            hashmap[nums[i]]++;<br>            <span class="hljs-keyword">if</span>(hashmap[nums[i]]&gt;=<span class="hljs-number">2</span>)<br>            &#123;<br>                res=<span class="hljs-number">1</span>; <br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="想法-3"><a class="markdownIt-Anchor" href="#想法-3"></a> 想法 3</h2><p>在討論區看到很酷的一行寫法，用set會排序且一個元素指出現一次的性質</p><h2 id="code-3"><a class="markdownIt-Anchor" href="#code-3"></a> code 3</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">containsDuplicate</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nums.size() &gt; <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;(nums.begin(), nums.end()).size();        <br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>blind 75</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021-2022 ACM-ICPC Latin American Regional 前七題</title>
    <link href="/2022/08/22/icpc103640/"/>
    <url>/2022/08/22/icpc103640/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/103640">題目連結</a><br />排序從簡單到難</p><h1 id="k-kiara-is-a-recursive-acronym"><a class="markdownIt-Anchor" href="#k-kiara-is-a-recursive-acronym"></a> K. KIARA is a Recursive Acronym</h1><p>如果輸入的每個單字開頭字母可以組成其中一個單字(字母可重複使用)，輸出<code>Y</code>，否則輸出<code>N</code>。</p><p>開一個26大小的陣列，儲存出現的字母。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> ll MAXN=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br>ll k,res=<span class="hljs-number">1</span>;<br>string s[MAXN];<br><span class="hljs-keyword">bool</span> ss[<span class="hljs-number">26</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    cin&gt;&gt;k;<br>    <span class="hljs-built_in">memset</span>(ss,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ss);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        cin&gt;&gt;s[i];<br>        ss[s[i][<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        res=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;s[i].<span class="hljs-built_in">length</span>();j++)<br>            <span class="hljs-keyword">if</span>(!ss[s[i][j]-<span class="hljs-string">&#x27;A&#x27;</span>])    res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(res==<span class="hljs-number">1</span>)  <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout&lt;&lt;(res?<span class="hljs-string">&quot;Y\n&quot;</span>:<span class="hljs-string">&quot;N\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="f-fields-division"><a class="markdownIt-Anchor" href="#f-fields-division"></a> F. Fields Division</h1><p>用<code>並查集</code>判斷連通塊，同時要保證a跟b得到的田地產量總和盡可能相等，如果不相等 則讓<code>A</code>比較大。</p><ul><li><code>2^n</code>大於<code>2^0</code>加到<code>2^n-1</code></li></ul><p>則可知第<code>n</code>塊地必為<code>A</code>的，跟<code>n-1</code>塊連通的為<code>B</code>的，</p><h2 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN=<span class="hljs-number">3e5</span>+<span class="hljs-number">10</span>;<br>ll n,m;<br>ll p[MAXN]; <span class="hljs-comment">//祖宗</span><br><span class="hljs-function">ll <span class="hljs-title">find</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)    p[i]=i;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        ll a,b; <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(max(a,b)==n)    <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//dsu //如果跟n連通 則不理會 到時候直接印出A</span><br>        p[find(a)]=find(b); <span class="hljs-comment">//dsu </span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(find(i)==find(n<span class="hljs-number">-1</span>))  <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;B&#x27;</span>; <span class="hljs-comment">//跟n-1塊連通的屬於B</span><br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="i-invested-money"><a class="markdownIt-Anchor" href="#i-invested-money"></a> I. Invested Money</h1><p>不管如何，最後都變成是<code>Mon</code> -&gt; <code>Wen</code> -&gt; <code>Fri</code> 的規律，當<code>Mon</code>出現時，91天後又會回到<code>Mon</code>，所以天數可以直接<code>%91</code>。</p><h2 id="code-3"><a class="markdownIt-Anchor" href="#code-3"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll inf=<span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-built_in">string</span> s[<span class="hljs-number">7</span>]=&#123;<span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>, <span class="hljs-string">&quot;Wed&quot;</span>, <span class="hljs-string">&quot;Thu&quot;</span>, <span class="hljs-string">&quot;Fri&quot;</span>, <span class="hljs-string">&quot;Sat&quot;</span>, <span class="hljs-string">&quot;Sun&quot;</span>&#125;;<br><span class="hljs-built_in">string</span> t;<br>ll n;<br>ll d,day,st; <br>ll ans=inf;<br><span class="hljs-function">ll <span class="hljs-title">check</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res=-x;<br>    day=(st-(x%<span class="hljs-number">7</span>)+<span class="hljs-number">7</span>)%<span class="hljs-number">7</span>; <span class="hljs-comment">//當前是星期幾</span><br>    <span class="hljs-keyword">while</span>(res&lt;<span class="hljs-number">0</span>||x==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(day==<span class="hljs-number">0</span>&amp;&amp;res&lt;<span class="hljs-number">-91</span>) <span class="hljs-comment">//如果是禮拜一，天數直接 % 91</span><br>        &#123;<br>            res*=<span class="hljs-number">-1</span>;<br>            res%=<span class="hljs-number">91</span>;<br>            res*=<span class="hljs-number">-1</span>;<br>        &#125;<br><br>        x=<span class="hljs-number">1</span>;<br>        day+=<span class="hljs-number">2</span>; <span class="hljs-comment">//過30天後 = 星期天數+2</span><br>        <span class="hljs-keyword">if</span>(day&gt;<span class="hljs-number">4</span>) <span class="hljs-comment">//如果過30天候 是假日，則day要便禮拜一，</span><br>        &#123;<br>            res+=(<span class="hljs-number">30</span>+<span class="hljs-number">7</span>-day);<br>            day=<span class="hljs-number">0</span>;   <br>        &#125;<br>        <span class="hljs-keyword">else</span>    res+=<span class="hljs-number">30</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++) <span class="hljs-keyword">if</span>(s[i]==t) st=i;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        ll x; <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        ans=min(ans,check(x));<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="j-joining-pairs"><a class="markdownIt-Anchor" href="#j-joining-pairs"></a> J. Joining Pairs</h1>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>icpc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>icpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Backspace (雙指針)</title>
    <link href="/2022/08/18/cd1553d/"/>
    <url>/2022/08/18/cd1553d/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given two strings s and t, both consisting of lowercase English letters. You are going to type the string s character by character, from the first character to the last one.</p><p>When typing a character, instead of pressing the button corresponding to it, you can press the “Backspace” button. It deletes the last character you have typed among those that aren’t deleted yet (or does nothing if there are no characters in the current string). For example, if s is “abcbd” and you press Backspace instead of typing the first and the fourth characters, you will get the string “bd” (the first press of Backspace deletes no character, and the second press deletes the character ‘c’). Another example, if s is “abcaa” and you press Backspace instead of the last two letters, then the resulting text is “a”.</p><p>Your task is to determine whether you can obtain the string t, if you type the string s and press “Backspace” instead of typing several (maybe zero) characters of s.<br /><strong>Input</strong><br />The first line contains a single integer q (1≤q≤1e5) — the number of test cases.</p><p>The first line of each test case contains the string s (1≤|s|≤1e5). Each character of s is a lowercase English letter.</p><p>The second line of each test case contains the string t (1≤|t|≤1e5). Each character of t is a lowercase English letter.</p><p>It is guaranteed that the total number of characters in the strings over all test cases does not exceed 2e5.<br /><strong>Output</strong><br />For each test case, print “YES” if you can obtain the string t by typing the string s and replacing some characters with presses of “Backspace” button, or “NO” if you cannot.</p><p>You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).<br /><strong>Example</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-number">4</span><br>ababa<br><span class="hljs-keyword">ba</span><br><span class="hljs-keyword"></span>ababa<br><span class="hljs-keyword">bb</span><br><span class="hljs-keyword"></span>aaa<br>aaaa<br>aababa<br>ababa<br></code></pre></div></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">YES</span><br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>從找到第一個相同字符後，後面的每個字浮下標奇偶性都要相同。</p><ol><li>reverse 兩字串</li><li>遍歷字串<code>a</code></li><li>用<code>flag</code>判斷奇偶性是否相同</li></ol><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">// two pointers 雙指針</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll t,c,pos;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">string</span> a,b;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        c=<span class="hljs-number">0</span>; pos=<span class="hljs-number">0</span>; flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        reverse(a.begin(),a.end());<br>        reverse(b.begin(),b.end());<br>        <span class="hljs-comment">//flag 用來判斷奇偶性 是否相同</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;i:a)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(flag)    flag=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==b[pos])  pos++;<br>            <span class="hljs-keyword">else</span>    flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(pos==b.size())   &#123;c=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br><br>        <span class="hljs-built_in">cout</span>&lt;&lt;(c?<span class="hljs-string">&quot;YES\n&quot;</span>:<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>雙指針</tag>
      
      <tag>two pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 121 - Best Time to Buy and Sell Stock [Array]</title>
    <link href="/2022/08/18/leetcode121/"/>
    <url>/2022/08/18/leetcode121/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">題目連結</a>(easy)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given an array prices where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p><p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p><p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p><p><strong>Example 1</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: prices =<span class="hljs-meta"> [7,1,5,3,6,4]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">5</span><br><span class="hljs-attribute">Explanation</span>: Buy <span class="hljs-literal">on</span> day <span class="hljs-number">2</span> (price = <span class="hljs-number">1</span>) and sell <span class="hljs-literal">on</span> day <span class="hljs-number">5</span> (price = <span class="hljs-number">6</span>), profit = <span class="hljs-number">6</span>-<span class="hljs-number">1</span> = <span class="hljs-number">5</span>.<br><span class="hljs-attribute">Note</span> that buying <span class="hljs-literal">on</span> day <span class="hljs-number">2</span> and selling <span class="hljs-literal">on</span> day <span class="hljs-number">1</span> is not allowed because you must buy before you sell.<br></code></pre></div></td></tr></table></figure><p><strong>Example 2</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-string">prices</span> <span class="hljs-string">=</span> [<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br><span class="hljs-attr">Output:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Explanation:</span> <span class="hljs-string">In</span> <span class="hljs-string">this</span> <span class="hljs-string">case,</span> <span class="hljs-literal">no</span> <span class="hljs-string">transactions</span> <span class="hljs-string">are</span> <span class="hljs-string">done</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">max</span> <span class="hljs-string">profit</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">.</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints</strong></p><ul><li>1 &lt;= prices.length &lt;= 1e5</li><li>0 &lt;= prices[i] &lt;= 1e4</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><ol><li><code>buyin</code>存買入的價格，<code>profit</code>為獲利。</li><li>枚舉<code>prices</code>陣列，發現當前獲利比以前的高時，就更新<code>profit</code>; 發現當前價格比以往低時，就更新<code>buyin</code>。</li><li>返回 <code>profit</code></li></ol><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> buyin=prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span> profit=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;prices.size();i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> sell_price=prices[i];<br>            profit=max(profit,sell_price-buyin);<br>            buyin=min(buyin,prices[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> profit;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>blind 75</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 最長連續不重復子序列 (雙指針)</title>
    <link href="/2022/08/17/acw799/"/>
    <url>/2022/08/17/acw799/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個長度為 n 的整數序列，請找出最長的不包含重復的數的連續區間，輸出它的長度。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含整數 n。</p></li><li><p>第二行包含 n 個整數（均在 0∼105 範圍內），表示整數序列。</p></li></ul><p><strong>輸出格式</strong></p><ul><li>共一行，包含一個整數，表示最長的不包含重復的數的連續區間的長度。</li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n≤1e5<br /><strong>輸入樣例</strong></li></ul><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n,ans;<br>ll a[MAXN],s[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(!s[a[j]]&amp;&amp;j&lt;n)<br>        &#123;<br>            s[a[j]]++;<br>            j++;<br>        &#125;<br>        s[a[i]]--;<br>        ans=max(ans,j-i);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>基礎演算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>雙指針</tag>
      
      <tag>two pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Great Graphs (前綴和優化)</title>
    <link href="/2022/08/16/cf1540a/"/>
    <url>/2022/08/16/cf1540a/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1540/A">題目連結</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Farmer John has a farm that consists of n pastures connected by one-directional roads. Each road has a weight, representing the time it takes to go from the start to the end of the road. The roads could have negative weight, where the cows go so fast that they go back in time! However, Farmer John guarantees that it is impossible for the cows to get stuck in a time loop, where they can infinitely go back in time by traveling across a sequence of roads. Also, each pair of pastures is connected by at most one road in each direction.</p><p>Unfortunately, Farmer John lost the map of the farm. All he remembers is an array d, where di is the smallest amount of time it took the cows to reach the i-th pasture from pasture 1 using a sequence of roads. The cost of his farm is the sum of the weights of each of the roads, and Farmer John needs to know the minimal cost of a farm that is consistent with his memory.</p><p><strong>Input</strong></p><ul><li><p>The first line contains one integer t (1≤t≤1e4) — the number of test cases. Then t cases follow.</p></li><li><p>The first line of each test case contains a single integer n (1≤n≤1e5) — the number of pastures.</p></li><li><p>The second line of each test case contains n space separated integers d1,d2,…,dn (0≤di≤1e9) — the array d. It is guaranteed that d1=0.</p></li><li><p>It is guaranteed that the sum of n over all test cases does not exceed 1e5.</p></li></ul><p><strong>Output</strong></p><ul><li>For each test case, output the minimum possible cost of a farm that is consistent with Farmer John’s memory.</li></ul><p><strong>Example</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1000000000</span><br><span class="hljs-number">1</span><br><span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-3</span><br>0<br>0<br></code></pre></div></td></tr></table></figure><h2 id="大意"><a class="markdownIt-Anchor" href="#大意"></a> 大意</h2><p>n個點，d[i]表示i到第一個點的距離，現在加邊，可以加負邊，使得距離之和最小。<br /><strong>想法</strong><br />題目給的 d 可以看成一前綴和陣列，每條路的權重為d[i+1]-d[i]。<br />我們目的是在不影響各點最短路長度的情況下，盡可能建權值為負的邊。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll t,n;<br>ll d[MAXN];<br>ll ans[MAXN];<br>ll res;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;d[i];<br>        sort(d,d+n); <span class="hljs-comment">// 先排序</span><br>        ans[<span class="hljs-number">0</span>]=(<span class="hljs-number">-1</span>)*d[<span class="hljs-number">1</span>];<br>        res=d[<span class="hljs-number">1</span>]+ans[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>        &#123;<br>            ans[i]=(i+<span class="hljs-number">1</span>)*(<span class="hljs-number">-1</span>)*(d[i+<span class="hljs-number">1</span>]-d[i])+ans[i<span class="hljs-number">-1</span>];<br>            res+=(d[i+<span class="hljs-number">1</span>]-d[i])+ans[i];<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>前綴和</tag>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces - Dijkstra? (優化Dijkstra)</title>
    <link href="/2022/08/15/cf20c/"/>
    <url>/2022/08/15/cf20c/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/20/C">連結</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given a weighted undirected graph. The vertices are enumerated from 1 to n. Your task is to find the shortest path between the vertex 1 and the vertex n.</p><p><strong>Input</strong><br />The first line contains two integers n and m (2 ≤ n ≤ 1e5, 0 ≤ m ≤ 1e5), where n is the number of vertices and m is the number of edges. Following m lines contain one edge each in form ai, bi and wi (1 ≤ ai, bi ≤ n, 1 ≤ wi ≤ 1e6), where ai, bi are edge endpoints and wi is the length of the edge.</p><p>It is possible that the graph has loops and multiple edges between pair of vertices.</p><p><strong>Output</strong><br />Write the only integer -1 in case of no path. Write the shortest path in opposite case. If there are many solutions, print any of them.</p><p><strong>Example</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <br></code></pre></div></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <br></code></pre></div></td></tr></table></figure><h2 id="大意"><a class="markdownIt-Anchor" href="#大意"></a> 大意</h2><p>堆優化Dijkstra + 紀錄路徑。<br />樸素Dijkstra為<code>O(n^2)</code>，而這題數據很明顯會超時，所以要用堆優化的Dijkstra <code>O(mlogn)</code>。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">// heap優化版本 Dijkstra</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll,ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> ll INF=<span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>; <span class="hljs-comment">//大約19位的一個數</span><br>ll n,m;<br>ll h[MAXN],e[MAXN],ne[MAXN],idx;<br>ll w[MAXN]; <span class="hljs-comment">// 權重</span><br>ll d[MAXN]; <span class="hljs-comment">// 1到各點最短距離</span><br>ll pre[MAXN];<br>vt&lt;ll&gt; route;<br><span class="hljs-keyword">bool</span> vis[MAXN]; <span class="hljs-comment">// 如果為true說明這個點的最短路徑已經確定</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll x,ll y,ll c)</span></span><br><span class="hljs-function"></span>&#123;<br>    w[idx]=c; <span class="hljs-comment">// 權重</span><br>    e[idx]=y,ne[idx]=h[x],h[x]=idx++; <span class="hljs-comment">// linked ist</span><br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d,INF,<span class="hljs-keyword">sizeof</span> d); <span class="hljs-comment">// 初始化距離</span><br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化距離</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;pll, vt&lt;pll&gt;, greater&lt;pll&gt;&gt; heap;<br>    heap.push(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">while</span>(!heap.empty())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=heap.top();<br>        heap.pop();<br>        ll ver=t.second,distance=t.first;<br>        <span class="hljs-keyword">if</span>(vis[ver])    <span class="hljs-keyword">continue</span>;<br>        vis[ver]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(ll i=h[ver];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            ll j=e[i];<br>            <span class="hljs-keyword">if</span>(d[j]&gt;distance+w[i])<br>            &#123;<br>                pre[j]=ver;<br>                d[j]=distance+w[i];<br>                heap.push(&#123;d[j],j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(d[n]==INF)    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_route</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t=n;<br>    route.pb(n);<br>    <span class="hljs-keyword">while</span>(t!=<span class="hljs-number">1</span>)<br>    &#123;<br>        route.pb(pre[t]);<br>        t=pre[t];<br>    &#125;<br>    reverse(route.begin(),route.end());<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;route.size();i++)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,route[i]);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y,c; <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;c);<br>        add(x,y,c); <span class="hljs-comment">// 建邊</span><br>        add(y,x,c); <span class="hljs-comment">// 因為是無向圖 所以a-&gt;b b-&gt;a 都要建邊</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(dijkstra())  print_route();<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Codeforces</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>Dijkstra</tag>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - Dijkstra求最短路 II (優化Dijkstra)</title>
    <link href="/2022/08/15/acw850/"/>
    <url>/2022/08/15/acw850/</url>
    
    <content type="html"><![CDATA[<p><a href="/2022/08/15/cf20c/">題目練習 Codeforces Dijkstra?(優化Dijkstra + 印出路徑)</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>定一個 n 個點 m 條邊的有向圖，圖中可能存在重邊和自環，所有邊權均為非負值。</p><p>請你求出 1 號點到 n 號點的最短距離，如果無法從 1 號點走到 n 號點，則輸出 −1。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含整數 n 和 m。</p></li><li><p>接下來 m 行每行包含三個整數 x,y,z，表示存在一條從點 x 到點 y 的有向邊，邊長為 z。</p></li></ul><p><strong>輸出格式</strong></p><ul><li><p>輸出一個整數，表示 1 號點到 n 號點的最短距離。</p></li><li><p>如果路徑不存在，則輸出 −1。</p></li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n,m≤1.5×1e5,</li><li>圖中涉及邊長均不小於 0，且不超過 10000。</li><li>數據保證：如果最短路存在，則最短路的長度不超過 109。</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p><a href="https://www.acwing.com/solution/content/6554/">詳細解釋</a></p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll,ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1.5e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br>ll n,m;<br>ll h[MAXN],e[MAXN],ne[MAXN],idx;<br>ll w[MAXN]; <span class="hljs-comment">// 權重</span><br>ll d[MAXN]; <span class="hljs-comment">// 1到各點最短距離</span><br><span class="hljs-keyword">bool</span> vis[MAXN]; <span class="hljs-comment">// 如果為true說明這個點的最短路徑已經確定</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll x,ll y,ll c)</span></span><br><span class="hljs-function"></span>&#123;<br>    w[idx]=c; <span class="hljs-comment">// 權重</span><br>    e[idx]=y,ne[idx]=h[x],h[x]=idx++; <span class="hljs-comment">// linked ist</span><br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d,INF,<span class="hljs-keyword">sizeof</span> d); <span class="hljs-comment">// 初始化距離</span><br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化距離</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;pll, vt&lt;pll&gt;, greater&lt;pll&gt;&gt; heap;<br>    heap.push(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">while</span>(!heap.empty())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=heap.top();<br>        heap.pop();<br>        ll ver=t.second,distance=t.first;<br>        <span class="hljs-keyword">if</span>(vis[ver])    <span class="hljs-keyword">continue</span>;<br>        vis[ver]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(ll i=h[ver];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            ll j=e[i];<br>            <span class="hljs-keyword">if</span>(d[j]&gt;distance+w[i])<br>            &#123;<br>                d[j]=distance+w[i];<br>                heap.push(&#123;d[j],j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(d[n]==INF)    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        ll x,y,c; <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;c;<br>        add(x,y,c); <span class="hljs-comment">// 建邊</span><br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;dijkstra()&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>Dijkstra</tag>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 有邊數限制的最短路 (bellman ford)</title>
    <link href="/2022/08/15/acw853/"/>
    <url>/2022/08/15/acw853/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個 n 個點 m 條邊的有向圖，圖中可能存在重邊和自環， 邊權可能為負數。</p><p>請你求出從 1 號點到 n 號點的最多經過 k 條邊的最短距離，如果無法從 1 號點走到 n 號點，輸出 impossible。</p><p>注意：圖中可能 存在負權迴路 。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含三個整數 n,m,k。</p></li><li><p>接下來 m 行，每行包含三個整數 x,y,z，表示存在一條從點 x 到點 y 的有向邊，邊長為 z。</p></li><li><p>點的編號為 1∼n。</p></li></ul><p><strong>輸出格式</strong></p><ul><li><p>輸出一個整數，表示從 1 號點到 n 號點的最多經過 k 條邊的最短距離。</p></li><li><p>如果不存在滿足條件的路徑，則輸出 impossible。</p></li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n,k≤500,</li><li>1≤m≤10000,</li><li>1≤x,y≤n，</li><li>任意邊長的絕對值不超過 10000。</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p><a href="https://www.acwing.com/solution/content/6320/">詳細解釋</a><br /><a href="https://www.acwing.com/solution/content/14088/">詳細解釋</a></p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">510</span>;<br>ll n,m,k;<br>ll d[MAXN]; <br>ll backup[MAXN];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span><br>    ll a;<br>    ll b;<br>    ll w;<br>&#125; e[<span class="hljs-number">10010</span>];<br><span class="hljs-function">ll <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> d);<br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(backup,d,<span class="hljs-keyword">sizeof</span> d);<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;m;j++)<br>        &#123;<br>            ll a=e[j].a,b=e[j].b,w=e[j].w;<br>            d[b]=min(d[b],backup[a]+w);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        ll a,b,w; <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;w;<br>        e[i]=&#123;a,b,w&#125;;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(bellman_ford()&gt;<span class="hljs-number">0x3f3f3f3f3f</span>/<span class="hljs-number">2</span>?<span class="hljs-string">&quot;impossible&quot;</span>:to_string(bellman_ford()))&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>最短路</tag>
      
      <tag>bellman ford</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - Dijkstra求最短路 I (樸素Dijkstra)</title>
    <link href="/2022/08/15/acw849/"/>
    <url>/2022/08/15/acw849/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個 n 個點 m 條邊的有向圖，圖中可能存在重邊和自環，所有邊權均為正值。</p><p>請你求出 1 號點到 n 號點的最短距離，如果無法從 1 號點走到 n 號點，則輸出 −1。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含整數 n 和 m。</p></li><li><p>接下來 m 行每行包含三個整數 x,y,z，表示存在一條從點 x 到點 y 的有向邊，邊長為 z。</p></li></ul><p><strong>輸出格式</strong></p><ul><li><p>輸出一個整數，表示 1 號點到 n 號點的最短距離。</p></li><li><p>如果路徑不存在，則輸出 −1。</p></li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n≤500,</li><li>1≤m≤1e5,</li><li>圖中涉及邊長均不超過10000。</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p><a href="https://www.acwing.com/solution/content/13602/">詳細解釋</a><br />這是沒有優化的Dijkstra，n(點數)範圍比較低的時候可以過，但如果題目的n範圍是1e5或以上，就要用優化過的Dijkstra。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//Dijkstra</span><br><span class="hljs-comment">//用鄰接矩陣存</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">510</span>;<br>ll n,m;<br>ll g[MAXN][MAXN]; <span class="hljs-comment">//鄰接矩陣</span><br>ll d[MAXN]; <span class="hljs-comment">// 1到各點距離 </span><br><span class="hljs-keyword">bool</span> vis[MAXN];<br><span class="hljs-function">ll <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> d); <span class="hljs-comment">//初始化距離到正無窮</span><br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        ll t=<span class="hljs-number">-1</span>; <span class="hljs-comment">// t為當前訪問的點</span><br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            <span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;(t==<span class="hljs-number">-1</span>||d[t]&gt;d[j]))<br>                t=j;<br>        vis[t]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            d[j]=min(d[j],d[t]+g[t][j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> g); <span class="hljs-comment">//為什麼0x3f? https://www.51cto.com/article/679151.html</span><br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        ll a,b,c;   <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b]=min(g[a][b],c); <span class="hljs-comment">//a跟b之間 可能存在多條邊，我們只需要存權重最小的即可</span><br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(dijkstra()&gt;=<span class="hljs-number">0x3f3f3f3f</span>?<span class="hljs-number">-1</span>:dijkstra())&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>Dijkstra</tag>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 1310 - XOR Queries of a Subarray (Xor前綴和)</title>
    <link href="/2022/08/14/leetcode1310/"/>
    <url>/2022/08/14/leetcode1310/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/xor-queries-of-a-subarray/">題目</a>(Medium)<br /><a href="/2022/08/13/acw4507/">相似題 - 子數組異或和(前綴和 + 雜湊表)</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].</p><p>For each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR … XOR arr[righti] ).</p><p>Return an array answer where answer[i] is the answer to the ith query.<br /><strong>Example 1:</strong></p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]<br>Output: [2,7,14,8] <br>Explanation: <br>The binary representation of the elements in the<span class="hljs-built_in"> array </span>are:<br>1 = 0001 <br>3 = 0011 <br>4 = 0100 <br>8 = 1000 <br>The XOR values for queries are:<br>[0,1] = 1<span class="hljs-built_in"> xor </span>3 = 2 <br>[1,2] = 3<span class="hljs-built_in"> xor </span>4 = 7 <br>[0,3] = 1<span class="hljs-built_in"> xor </span>3<span class="hljs-built_in"> xor </span>4<span class="hljs-built_in"> xor </span>8 = 14 <br>[3,3] = 8<br></code></pre></div></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">Input: arr = <span class="hljs-comment">[4,8,2,10]</span>, queries = <span class="hljs-comment">[<span class="hljs-comment">[2,3]</span>,<span class="hljs-comment">[1,3]</span>,<span class="hljs-comment">[0,0]</span>,<span class="hljs-comment">[0,3]</span>]</span><br>Output: <span class="hljs-comment">[8,0,4,4]</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>1 &lt;= arr.length, queries.length &lt;= 3e4</li><li>1 &lt;= arr[i] &lt;= 1e9</li><li>queries[i].length == 2</li><li>0 &lt;= lefti &lt;= righti &lt; arr.length</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>開一陣列<code>prefix</code>存 <font color=#FF0000 >異或前綴和</font>，<br /><code>區間 i ~ j 的 異或和</code> = <code>prefix[i-1]</code> ^ <code>prefix[j]</code> 。<br /><strong>備註</strong>:<br />如果區間 i 為 0 ，則直接返回<code>prefix[j]</code>。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">xorQueries</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; arr, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> prefix[arr.size()]; <span class="hljs-comment">// 存前綴Xor和</span><br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        prefix[<span class="hljs-number">0</span>]=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.size();i++)   prefix[i]=prefix[i<span class="hljs-number">-1</span>]^arr[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;queries.size();i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!queries[i][<span class="hljs-number">0</span>])  ans.push_back(prefix[queries[i][<span class="hljs-number">1</span>]]); <br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> res=prefix[queries[i][<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>]^prefix[queries[i][<span class="hljs-number">1</span>]];<br>                ans.push_back(res);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>medium</tag>
      
      <tag>前綴和</tag>
      
      <tag>Xor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 子數組異或和 (前綴和 + 雜湊表)</title>
    <link href="/2022/08/13/acw4507/"/>
    <url>/2022/08/13/acw4507/</url>
    
    <content type="html"><![CDATA[<p><a href="/2022/08/14/leetcode1310/">leetcode 1310 相似題</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個長度為 n 的整數數組 a1,a2,…,an。</p><p>請你統計一共有多少個數組 a 的非空連續子數組能夠同時滿足以下所有條件：</p><ol><li>該連續子數組的長度為偶數。</li><li>該連續子數組的前一半元素的異或和等於其後一半元素的異或和。<br />例如，當給定數組為 [1,2,3,4,5] 時，滿足條件的連續子數組只有 1 個：[2,3,4,5]。</li></ol><p><strong>輸入格式</strong></p><ul><li><p>第一行包含整數 n。</p></li><li><p>第二行包含 n 個整數 a1,a2,…,an。</p></li></ul><p><strong>輸出格式</strong></p><ul><li>一個整數，表示滿足條件的連續子數組的數量。</li></ul><p><strong>數據範圍</strong></p><ul><li>前三個測試點滿足 2≤n≤10。</li><li>所有測試點滿足 2≤n≤3×1e5，0≤ai&lt;2^20。</li></ul><p><strong>輸入樣例1</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例1</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br></code></pre></div></td></tr></table></figure><p><strong>輸入樣例2</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例2</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p><strong>核心想法</strong>:</p><ol><li><code>該連續子數組的長度為偶數</code>，代表需要判斷奇偶性。</li><li><code>該連續子數組的前一半元素的異或和等於其後一半元素的異或和</code>，可以想成子數組內的<font color=#FF0000 >[前半異或和] ^ [後半異或和] = 0</font>。假設一子樹組符合要求 範圍 i ~ j ，則 i ~ i+m 與 i+m ~ j 的異或和 = 0，也等於 0 ~ i 與 0 ~ j 的異或和 = 0。</li></ol><p>先求出 S 前綴異或和，求完後，遍歷 S ，如果 S[i] = S[j] (也可以想成s[i] ^ s[j] = 0)且 兩者奇偶性相同，代表 子數組 [i,j] 滿足題目要求。</p><p><strong>備註</strong>:</p><ul><li>unordered_map是雜湊表，無序的，增刪改查都是 O(1) 的。map平衡樹，動態維護一個有序序列，增刪改查是 O(logn) 的。</li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN =<span class="hljs-number">3e5</span>+<span class="hljs-number">10</span>;<br>ll n,res,sum;<br>ll q[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;q[i];<br>    <span class="hljs-built_in">unordered_map</span>&lt;ll,ll&gt; s[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 雜湊表 照奇偶性分 </span><br>    s[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]++; <span class="hljs-comment">// 前綴和需要處理的邊界值S[0]，偶數方案前綴異或和為0的需要跟S[0]配對，所以需要先加上1</span><br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        sum^=q[i]; <span class="hljs-comment">// xor前綴和</span><br>        res+=s[i&amp;<span class="hljs-number">1</span>][sum]; <br>        s[i&amp;<span class="hljs-number">1</span>][sum]++;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>數據結構</category>
      
      <category>基礎演算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>前綴和</tag>
      
      <tag>hash table</tag>
      
      <tag>雜湊表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 有向圖的拓撲序列 (bfs)</title>
    <link href="/2022/08/12/acw848/"/>
    <url>/2022/08/12/acw848/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個 n 個點 m 條邊的有向圖，點的編號是 1 到 n，圖中可能存在重邊和自環。</p><p>請輸出任意一個該有向圖的拓撲序列，如果拓撲序列不存在，則輸出 −1。</p><p>若一個由圖中所有點構成的序列 A 滿足：對於圖中的每條邊 (x,y)，x 在 A 中都出現在 y 之前，則稱 A 是該圖的一個拓撲序列。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含兩個整數 n 和 m。</p></li><li><p>接下來 m 行，每行包含兩個整數 x 和 y，表示存在一條從點 x 到點 y 的有向邊 (x,y)。</p></li></ul><p><strong>輸出格式</strong></p><ul><li>共一行，如果存在拓撲序列，則輸出任意一個合法的拓撲序列即可。<br />否則輸出 −1。</li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n,m≤1e5</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>拓樸排序就是判斷是否為有向無環圖(DAG)，即每一個狀態至少有一點的入度為0才符合要求。</p><ol><li>先把入度為0的所有點加入queue</li><li>從queue中取出t點，加入ans陣列中儲存</li><li>寬度搜索t點所連結的點，判斷這些點的入度扣1後(即刪除j點的意思)，是否為0，如果是，則加入queue中，繼續重新寬搜，直到queue為空</li><li>最後，判斷ans中的數量是否等於n</li></ol><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n,m,cnt; <span class="hljs-comment">// cnt是紀錄答案的數量，用來判斷是否==n </span><br>ll ind[MAXN]; <span class="hljs-comment">//每個點的入度數</span><br>ll ans[MAXN];<br>ll h[MAXN],e[MAXN],ne[MAXN],idx; <span class="hljs-comment">//linked list</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],h[a]=idx++; <span class="hljs-comment">//linked list</span><br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">toposort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;ll&gt; q;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">if</span>(!ind[i]) q.push(i); <span class="hljs-comment">// 將所有入度為0的點加入queue</span><br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=q.front();<br>        q.pop();<br>        ans[cnt++]=t;<br>        <span class="hljs-keyword">for</span>(ll i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            ll j=e[i];<br>            <span class="hljs-keyword">if</span>(--ind[j]==<span class="hljs-number">0</span>) q.push(j);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (cnt==n);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        ll a,b; <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        add(a,b);<br>        ind[b]++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(toposort())<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>bfs</tag>
      
      <tag>linkedlist</tag>
      
      <tag>連結列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 圖中點的層次 (bfs)</title>
    <link href="/2022/08/12/acw847/"/>
    <url>/2022/08/12/acw847/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個 n 個點 m 條邊的有向圖，圖中可能存在重邊和自環。</p><p>所有邊的長度都是 1，點的編號為 1∼n。</p><p>請你求出 1 號點到 n 號點的最短距離，如果從 1 號點無法走到 n 號點，輸出 −1。</p><p><strong>輸入格式</strong><br />第一行包含兩個整數 n 和 m。</p><p>接下來 m 行，每行包含兩個整數 a 和 b，表示存在一條從 a 走到 b 的長度為 1 的邊。</p><p><strong>輸出格式</strong></p><ul><li>輸出一個整數，表示 1 號點到 n 號點的最短距離。</li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n,m≤1e5</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><p><a href="https://www.acwing.com/solution/content/76019/">詳細解釋</a></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n,m;<br>ll e[MAXN],ne[MAXN],h[MAXN],idx; <span class="hljs-comment">// linked list</span><br>ll d[MAXN]; <span class="hljs-comment">//用來存1到各點的距離，及判斷各點是否到訪過</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b, ne[idx]=h[a], h[a]=idx++;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;ll&gt; q;<br>    q.push(<span class="hljs-number">1</span>);<br>    d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(ll i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i]) <span class="hljs-comment">// linked list</span><br>        &#123;<br>            ll j=e[i];<br>            <span class="hljs-keyword">if</span>(d[j]==<span class="hljs-number">-1</span>) <span class="hljs-comment">// if j點 還未造訪過</span><br>            &#123;<br>                d[j]=d[t]+<span class="hljs-number">1</span>;<br>                q.push(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> d);<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        ll a,b; <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        add(a,b);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>bfs</tag>
      
      <tag>linkedlist</tag>
      
      <tag>連結列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 樹的重心 (dfs)</title>
    <link href="/2022/08/11/acw846/"/>
    <url>/2022/08/11/acw846/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一顆樹，樹中包含 n 個結點（編號 1∼n）和 n−1 條無向邊。</p><p>請你找到樹的重心，並輸出將重心刪除後，剩餘各個連通塊中點數的最大值。</p><p>重心定義：重心是指樹中的一個結點，如果將這個點刪除後，剩餘各個連通塊中點數的最大值最小，那麼這個節點被稱為樹的重心。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含整數 n，表示樹的結點數。</p></li><li><p>接下來 n−1 行，每行包含兩個整數 a 和 b，表示點 a 和點 b 之間存在一條邊。</p></li></ul><p><strong>輸出格式</strong></p><ul><li>輸出一個整數 m，表示將重心刪除後，剩餘各個連通塊中點數的最大值。</li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n≤1e5</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">9</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll h[MAXN],e[<span class="hljs-number">2</span>*MAXN],ne[<span class="hljs-number">2</span>*MAXN],idx,n,ans=MAXN;<br><span class="hljs-keyword">bool</span> vis[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b, ne[idx]=h[a],h[a]=idx++; <span class="hljs-comment">// linked list</span><br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">dfs</span><span class="hljs-params">(ll u)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res=<span class="hljs-number">0</span>;<br>    vis[u]=<span class="hljs-literal">true</span>;<br>    ll sum=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(ll i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i]) <span class="hljs-comment">// linked list</span><br>    &#123;<br>        ll j=e[i];<br>        <span class="hljs-keyword">if</span>(!vis[j])<br>        &#123;<br>            ll s=dfs(j);<br>            res=max(res,s);<br>            sum+=s;<br>        &#125;<br>    &#125;<br>    res=max(res,n-sum);<br>    ans=min(ans,res);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        ll a,b; <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        add(a,b),add(b,a);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>dfs</tag>
      
      <tag>linkedlist</tag>
      
      <tag>連結列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 八數位 (bfs)</title>
    <link href="/2022/08/11/acw845/"/>
    <url>/2022/08/11/acw845/</url>
    
    <content type="html"><![CDATA[<p>相關題目: <a href="">leetcode 773</a></p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>在一個 3×3 的網格中，1∼8 這 8 個數字和一個 x 恰好不重不漏地分佈在這 3×3 的網格中。</p><p>例如：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">x</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p>在游戲過程中，可以把 x 與其上、下、左、右四個方向之一的數字交換（如果存在）。</p><p>我們的目的是通過交換，使得網格變為如下排列（稱為正確排列）：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">8</span> x<br></code></pre></div></td></tr></table></figure><p>例如，示例中圖形就可以通過讓 x 先後與右、下、右三個方向的數字交換成功得到正確排列。</p><p>交換過程如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>   <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>   <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>   <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">x</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span>   <span class="hljs-number">4</span> x <span class="hljs-number">6</span>   <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>   <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span>   <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span>   <span class="hljs-number">7</span> x <span class="hljs-number">8</span>   <span class="hljs-number">7</span> <span class="hljs-number">8</span> x<br></code></pre></div></td></tr></table></figure><p>現在，給你一個初始網格，請你求出得到正確排列至少需要進行多少次交換。</p><p><strong>輸入格式</strong></p><ul><li><p>輸入占一行，將 3×3 的初始網格描繪出來。</p></li><li><p>例如，如果初始網格如下所示：</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <br><span class="hljs-attribute">x</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <br><span class="hljs-attribute">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <br></code></pre></div></td></tr></table></figure><ul><li>則輸入為：</li></ul><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> x <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出格式</strong></p><ul><li><p>輸出占一行，包含一個整數，表示最少交換次數。</p></li><li><p>如果不存在解決方案，則輸出 −1。</p></li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">5</span>  x  <span class="hljs-number">7</span>  <span class="hljs-number">6</span>  <span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">19<br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> s;<br><span class="hljs-function">ll <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> end=<span class="hljs-string">&quot;12345678x&quot;</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>&gt; q;<span class="hljs-comment">//</span><br>    q.push(s);<span class="hljs-comment">//</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; d;<br>    d[s]=<span class="hljs-number">0</span>;<br>    ll dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-keyword">while</span>(!q.empty())<span class="hljs-comment">//</span><br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=q.front();<span class="hljs-comment">//</span><br>        q.pop();<span class="hljs-comment">//</span><br>        ll distance=d[t];<br>        <span class="hljs-keyword">if</span>(t==end)  <span class="hljs-keyword">return</span> distance;<br>        ll k=t.find(<span class="hljs-string">&#x27;x&#x27;</span>);<br>        ll x = k / <span class="hljs-number">3</span>, y = k % <span class="hljs-number">3</span>; <span class="hljs-comment">//轉換成座標</span><br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        &#123;<br>            ll a=x+dx[i],b=y+dy[i];<br>            <span class="hljs-keyword">if</span>(a &gt;= <span class="hljs-number">0</span> &amp;&amp; a &lt; <span class="hljs-number">3</span> &amp;&amp; b &gt;= <span class="hljs-number">0</span> &amp;&amp; b &lt; <span class="hljs-number">3</span>)<br>            &#123;<br>                swap(t[k], t[a * <span class="hljs-number">3</span> + b]);<br>                <span class="hljs-keyword">if</span>(!d.count(t))<br>                &#123;<br>                    d[t] = distance + <span class="hljs-number">1</span>;<br>                    q.push(t);<br>                &#125;<br>                swap(t[k], t[a * <span class="hljs-number">3</span> + b]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">char</span> x; <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        s.pb(x);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;bfs(s)&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>bfs</tag>
      
      <tag>hash table</tag>
      
      <tag>雜湊表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ - Queue (STL)</title>
    <link href="/2022/08/11/queue/"/>
    <url>/2022/08/11/queue/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q; <span class="hljs-comment">//宣告一個queue</span><br><br>    q.push(<span class="hljs-number">1</span>); <span class="hljs-comment">//將1插入queue的最後一個位置</span><br><br>    q.pop(); <span class="hljs-comment">//刪除queue的最前一個元素 </span><br><br>    q.back(); <span class="hljs-comment">//取得queue的最後一個元素</span><br><br>    q.front(); <span class="hljs-comment">//取得queue的第一個元素</span><br><br>    q.size(); <span class="hljs-comment">//回傳queue的長度</span><br><br>    q.empty(); <span class="hljs-comment">//回傳queue是否為空 返回值為true或false</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>數據結構</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 逆序對數量 (合併排序)</title>
    <link href="/2022/08/10/acw788/"/>
    <url>/2022/08/10/acw788/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個長度為 n 的整數數列，請你計算數列中的逆序對的數量。</p><p>逆序對的定義如下：對於數列的第 i 個和第 j 個元素，如果滿足 i&lt;j 且 a[i]&gt;a[j]，則其為一個逆序對；否則不是。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含整數 n，表示數列的長度。</p></li><li><p>第二行包含 n 個整數，表示整個數列。</p></li></ul><p><strong>輸出格式</strong></p><ul><li>輸出一個整數，表示逆序對的個數。</li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n≤100000，</li><li>數列中的元素的取值範圍 [1,109]。</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">5<br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n;<br>ll q[MAXN],tmp[MAXN];<br><br><span class="hljs-function">ll <span class="hljs-title">merge_sort</span><span class="hljs-params">(ll l,ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    ll mid = l+r &gt;&gt; <span class="hljs-number">1</span>;<br>    ll res=merge_sort(l,mid)+merge_sort(mid+<span class="hljs-number">1</span>,r);<br>    ll k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)<br>        <span class="hljs-keyword">if</span>(q[i]&lt;=q[j])  tmp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tmp[k++]=q[j++];<br>            res+=mid-i+<span class="hljs-number">1</span>;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)   tmp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];<br>    <span class="hljs-keyword">for</span>(ll i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)    q[i]=tmp[j];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;q[i];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;merge_sort(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>基礎演算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>merge sort</tag>
      
      <tag>合併排序</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合併排序</title>
    <link href="/2022/08/10/acw787/"/>
    <url>/2022/08/10/acw787/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定你一個長度為 n 的整數數列。</p><p>請你使用歸並排序對這個數列按照從小到大進行排序。</p><p>並將排好序的數列按順序輸出。</p><p><strong>輸入格式</strong></p><ul><li><p>輸入共兩行，第一行包含整數 n。</p></li><li><p>第二行包含 n 個整數（所有整數均在 1∼109 範圍內），表示整個數列。</p></li></ul><p><strong>輸出格式</strong></p><ul><li>輸出共一行，包含 n 個整數，表示排好序的數列。</li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n≤100000</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n;<br>ll a[MAXN],tmp[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(ll l,ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)    <span class="hljs-keyword">return</span>;<br>    ll mid = l+r &gt;&gt; <span class="hljs-number">1</span>;<br>    merge_sort(l,mid),merge_sort(mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)<br>        <span class="hljs-keyword">if</span>(a[i]&lt;=a[j])  tmp[k++]=a[i++];<br>        <span class="hljs-keyword">else</span>    tmp[k++]=a[j++];<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)   tmp[k++]=a[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) tmp[k++]=a[j++];<br>    <span class="hljs-keyword">for</span>(ll i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)    &#123;a[i]=tmp[j];<span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;&#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    merge_sort(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>基礎演算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>merge sort</tag>
      
      <tag>合併排序</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 走迷宮 (bfs)</title>
    <link href="/2022/08/10/acw844/"/>
    <url>/2022/08/10/acw844/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1，其中 0 表示可以走的路，1 表示不可通过的墙壁。</p><p>最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。</p><p>请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。</p><p>数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。</p><p><strong>输入格式</strong></p><ul><li><p>第一行包含两个整数 n 和 m。</p></li><li><p>接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。</p></li></ul><p><strong>输出格式</strong></p><ul><li>输出一个整数，表示从左上角移动至右下角的最少移动次数。</li></ul><p><strong>数据范围</strong></p><ul><li>1≤n,m≤100</li></ul><p><strong>输入样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">8<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">初始化 <span class="hljs-function"><span class="hljs-built_in">queue</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(!<span class="hljs-built_in">queue</span>.empty)</span> <span class="hljs-comment">//當queue不空</span></span><br><span class="hljs-function"></span>&#123;<br>    t = <span class="hljs-built_in">queue</span>.front(); <br><br>    拓展 t;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair<span class="hljs-meta-string">&lt;ll,ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">110</span>;<br>ll n,m;<br>ll g[MAXN][MAXN],vis[MAXN][MAXN];<br><span class="hljs-function">ll <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;PII&gt; q;<br>    q.push(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> vis);<br>    vis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    ll dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;; <span class="hljs-comment">//往上下左右去找</span><br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        &#123;<br>            ll x=t.first+dx[i],y=t.second+dy[i];<br>            <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&lt;m&amp;&amp;!g[x][y]&amp;&amp;vis[x][y]==<span class="hljs-number">-1</span>)<br>            &#123;<br>                vis[x][y]=vis[t.first][t.second]+<span class="hljs-number">1</span>; <span class="hljs-comment">//vis[x][y]代表從(0,0)到(x,y)的最小步數</span><br>                q.push(&#123;x,y&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> vis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;m;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;g[i][j];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>bfs</tag>
      
      <tag>迷宮</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - n皇后問題 (dfs)</title>
    <link href="/2022/08/09/acw843/"/>
    <url>/2022/08/09/acw843/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>n−皇后問題是指將 n 個皇后放在 n×n 的國際象棋棋盤上，使得皇后不能相互攻擊到，即任意兩個皇后都不能處於同一行、同一列或同一斜線上。</p><p><img src="https://cdn.acwing.com/media/article/image/2019/06/08/19_860e00c489-1_597ec77c49-8-queens.png" alt="" /></p><p>現在給定整數 n，請你輸出所有的滿足條件的棋子擺法。<br />輸入格式<br />共一行，包含整數 n。</p><p><strong>輸出格式</strong><br />每個解決方案占 n 行，每行輸出一個長度為 n 的字元串，用來表示完整的棋盤狀態。</p><p>其中 . 表示某一個位置的方格狀態為空，Q 表示某一個位置的方格上擺著皇后。</p><p>每個方案輸出完成後，輸出一個空行。</p><p>注意：行末不能有多餘空格。</p><p>輸出方案的順序任意，只要不重復且沒有遺漏即可。</p><p><strong>數據範圍</strong></p><ul><li>1≤n≤9</li></ul><p><strong>輸入樣例：</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">4<br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">.Q..</span><br><span class="hljs-string">...Q</span><br>Q.<span class="hljs-string">..</span><br><span class="hljs-string">..Q.</span><br><br><span class="hljs-string">..Q.</span><br>Q.<span class="hljs-string">..</span><br><span class="hljs-string">...Q</span><br><span class="hljs-string">.Q..</span><br></code></pre></div></td></tr></table></figure><h2 id="想法-i-一個一個格子枚舉"><a class="markdownIt-Anchor" href="#想法-i-一個一個格子枚舉"></a> 想法 I (一個一個格子枚舉)</h2><p>一個一個格子枚舉，從第一格開始，看要不要放皇后，每個格子會有兩個分支，即放與不放，當枚舉完所有格子(n^2個)，就找到答案了。</p><h2 id="code-i-105ms"><a class="markdownIt-Anchor" href="#code-i-105ms"></a> code I (105ms)</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> s[<span class="hljs-number">9</span>];<br>ll n;<br><span class="hljs-keyword">bool</span> row[<span class="hljs-number">9</span>],col[<span class="hljs-number">9</span>],dg[<span class="hljs-number">9</span>],udg[<span class="hljs-number">9</span>]; <span class="hljs-comment">//行 列 斜 反斜</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll x,ll y,ll ss)</span><span class="hljs-comment">// ss為以放置皇后數量</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(y==n)    y=<span class="hljs-number">0</span>,x++; <span class="hljs-comment">//當該列枚舉完時，跳到下一列的第一格</span><br>    <span class="hljs-keyword">if</span>(x==n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(ss==n)<span class="hljs-comment">//當以放置皇后數量=n，表示有解</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-comment">//不放皇后</span><br>    dfs(x,y+<span class="hljs-number">1</span>,ss); <br>    <br>    <span class="hljs-comment">//放皇后</span><br>    <span class="hljs-keyword">if</span>(!row[x]&amp;&amp;!col[y]&amp;&amp;!dg[x+y]&amp;&amp;!udg[x-y+n])<span class="hljs-comment">//放皇后前 先檢查使否可以放</span><br>    &#123;<br>        s[x][y]=<span class="hljs-string">&#x27;Q&#x27;</span>;<br>        row[x]=col[y]=dg[x+y]=udg[x-y+n]=<span class="hljs-literal">true</span>;<br>        dfs(x,y+<span class="hljs-number">1</span>,ss+<span class="hljs-number">1</span>);<br>        row[x]=col[y]=dg[x+y]=udg[x-y+n]=<span class="hljs-literal">false</span>;<br>        s[x][y]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            s[i].pb(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="想法-ii-按行枚舉"><a class="markdownIt-Anchor" href="#想法-ii-按行枚舉"></a> 想法 II (按行枚舉)</h2><p>按行枚舉，從第0行開始dfs，dfs需要判斷列、斜向、反斜向，是否還可放置皇后。<br />相比第一種作法需要枚舉n^2次，按行枚舉只需要枚舉n次。</p><h2 id="code-ii-11ms"><a class="markdownIt-Anchor" href="#code-ii-11ms"></a> code II (11ms)</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> s[<span class="hljs-number">9</span>];<br>ll n;<br><span class="hljs-keyword">bool</span> col[<span class="hljs-number">9</span>],dg[<span class="hljs-number">9</span>],udg[<span class="hljs-number">9</span>]; <span class="hljs-comment">//列 斜 反斜</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(u==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!col[i]&amp;&amp;!dg[u+i]&amp;&amp;!udg[n-u+i])<span class="hljs-comment">//檢查 列 斜 反斜 是否可以再放置皇后</span><br>        &#123;<br>            s[u][i]=<span class="hljs-string">&#x27;Q&#x27;</span>;<br>            col[i]=dg[u+i]=udg[n-u+i]=<span class="hljs-literal">true</span>;<br>            dfs(u+<span class="hljs-number">1</span>);<br>            col[i]=dg[u+i]=udg[n-u+i]=<span class="hljs-literal">false</span>;<br>            s[u][i]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(ll j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            s[i].pb(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    dfs(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>dfs</tag>
      
      <tag>n皇后</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 1413 - Minimum Value to Get Positive Step by Step Sum (前綴和)</title>
    <link href="/2022/08/09/leetcode1413/"/>
    <url>/2022/08/09/leetcode1413/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/">連結</a>(Easy)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>Given an array of integers nums, you start with an initial positive value startValue.</p><p>In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).</p><p>Return the minimum positive value of startValue such that the step by step sum is never less than 1.<br /><strong>Example 1:</strong></p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">Input: nums = [<span class="hljs-number">-3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>]<br>Output: <span class="hljs-number">5</span><br>Explanation: <span class="hljs-keyword">If</span> you choose startValue = <span class="hljs-number">4</span>, <span class="hljs-built_in">in</span> the third iteration your step <span class="hljs-built_in">by</span> step <span class="hljs-built_in">sum</span> is less than <span class="hljs-number">1.</span><br>step <span class="hljs-built_in">by</span> step <span class="hljs-built_in">sum</span><br>startValue = <span class="hljs-number">4</span> | <span class="hljs-type">startValue</span> = <span class="hljs-number">5</span> | <span class="hljs-type">nums</span><br>  (<span class="hljs-number">4</span> <span class="hljs-number">-3</span> ) = <span class="hljs-number">1</span>  | <span class="hljs-type">(5</span> <span class="hljs-number">-3</span> ) = <span class="hljs-number">2</span>    |  <span class="hljs-type">-3</span><br>  (<span class="hljs-number">1</span> +<span class="hljs-number">2</span> ) = <span class="hljs-number">3</span>  | <span class="hljs-type">(2</span> +<span class="hljs-number">2</span> ) = <span class="hljs-number">4</span>    |   <span class="hljs-type">2</span><br>  (<span class="hljs-number">3</span> <span class="hljs-number">-3</span> ) = <span class="hljs-number">0</span>  | <span class="hljs-type">(4</span> <span class="hljs-number">-3</span> ) = <span class="hljs-number">1</span>    |  <span class="hljs-type">-3</span><br>  (<span class="hljs-number">0</span> +<span class="hljs-number">4</span> ) = <span class="hljs-number">4</span>  | <span class="hljs-type">(1</span> +<span class="hljs-number">4</span> ) = <span class="hljs-number">5</span>    |   <span class="hljs-type">4</span><br>  (<span class="hljs-number">4</span> +<span class="hljs-number">2</span> ) = <span class="hljs-number">6</span>  | <span class="hljs-type">(5</span> +<span class="hljs-number">2</span> ) = <span class="hljs-number">7</span>    |   <span class="hljs-type">2</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-symbol">Output:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">Explanation:</span> Minimum start value should be positive. <br></code></pre></div></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: nums =<span class="hljs-meta"> [1,-2,-3]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>1 &lt;= nums.length &lt;= 100</li><li>-100 &lt;= nums[i] &lt;= 100</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>先找出nums的前綴和(prefix sum)中最小的元素(可能為負或正)</p><ul><li>如果為正，則答案為1</li><li>如果為負，則答案為該數變號+1</li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minStartValue</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">aa</span><span class="hljs-params">(nums.size(),<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1e9</span>, c=nums[<span class="hljs-number">0</span>];;<br>        aa[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.size();i++)<br>        &#123;<br>aa[i]=nums[i]+aa[i<span class="hljs-number">-1</span>];<br>            c=min(c,aa[i]);<br>        &#125;<br>        ans=<span class="hljs-number">-1</span>*c+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ans&lt;=<span class="hljs-number">0</span>) ans=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>前綴和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 排列數字 (dfs)</title>
    <link href="/2022/08/08/acw842/"/>
    <url>/2022/08/08/acw842/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>給定一個整數 n，將數字 1∼n 排成一排，將會有很多種排列方法。</p><p>現在，請你按照字典序將所有的排列方法輸出。</p><p><strong>輸入格式</strong></p><ul><li>共一行，包含一個整數 n。</li></ul><p><strong>輸出格式</strong></p><ul><li>按字典序輸出所有排列方案，每個方案占一行。</li></ul><p><strong>數據範圍</strong></p><ul><li>1≤n≤7</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">3<br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h2 id="code-dfs"><a class="markdownIt-Anchor" href="#code-dfs"></a> code (dfs)</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll n;<br>ll p[<span class="hljs-number">8</span>],s[<span class="hljs-number">8</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(u==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)    <span class="hljs-built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!s[i])<br>        &#123;<br>            p[u]=i;<br>            s[i]=<span class="hljs-number">1</span>;<br>            dfs(u+<span class="hljs-number">1</span>);<br>            s[i]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    dfs(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="code-next_permutation"><a class="markdownIt-Anchor" href="#code-next_permutation"></a> code (next_permutation)</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll n;<br>ll a[<span class="hljs-number">8</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)    a[i]=i+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)    <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<span class="hljs-keyword">while</span>(next_permutation(a,a+n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>搜索與圖論</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>dfs</tag>
      
      <tag>next_permutation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 70 - Climbing Stairs (一維dp)</title>
    <link href="/2022/08/08/leetcode70/"/>
    <url>/2022/08/08/leetcode70/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/climbing-stairs/">連結</a>(Easy)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are climbing a staircase. It takes n steps to reach the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p><strong>Example 1:</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">2</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">Explanation:</span> There are two ways <span class="hljs-keyword">to</span> climb <span class="hljs-keyword">to</span> the top.<br><span class="hljs-number">1</span>. <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span><br><span class="hljs-number">2</span>. <span class="hljs-number">2</span> steps<br></code></pre></div></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">Explanation:</span> There are three ways <span class="hljs-keyword">to</span> climb <span class="hljs-keyword">to</span> the top.<br><span class="hljs-number">1</span>. <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span><br><span class="hljs-number">2</span>. <span class="hljs-number">1</span> <span class="hljs-keyword">step</span> + <span class="hljs-number">2</span> steps<br><span class="hljs-number">3</span>. <span class="hljs-number">2</span> steps + <span class="hljs-number">1</span> <span class="hljs-keyword">step</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>1 &lt;= n &lt;= 45</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><ul><li>轉移式: dp[i]=dp[i-1]+dp[i-2]</li><li>初始化: dp[0] dp[1]=1 dp[2]=2(注意dp[2]也要初始化)</li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> dp[n+<span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">2</span>)    dp[<span class="hljs-number">2</span>]=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)<br>            dp[i]=dp[i<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-2</span>];<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>一維dp</tag>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 518 - Coin Change II (一維dp)</title>
    <link href="/2022/08/08/leetcode518/"/>
    <url>/2022/08/08/leetcode518/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/coin-change-2/">連結</a>(Medium)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.</p><p>Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.</p><p>You may assume that you have an infinite number of each kind of coin.</p><p>The answer is guaranteed to fit into a signed 32-bit integer.</p><p><strong>Example 1:</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: amount = <span class="hljs-number">5</span>, coins =<span class="hljs-meta"> [1,2,5]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">Explanation</span>: there are four ways to make up the amount:<br><span class="hljs-attribute">5</span>=<span class="hljs-number">5</span><br><span class="hljs-attribute">5</span>=<span class="hljs-number">2</span>+<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br><span class="hljs-attribute">5</span>=<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span><br><span class="hljs-attribute">5</span>=<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: amount = <span class="hljs-number">3</span>, coins =<span class="hljs-meta"> [2]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">0</span><br><span class="hljs-attribute">Explanation</span>: the amount of <span class="hljs-number">3</span> cannot be made up just with coins of <span class="hljs-number">2</span>.<br></code></pre></div></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: amount = <span class="hljs-number">10</span>, coins =<span class="hljs-meta"> [10]</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>1 &lt;= coins.length &lt;= 300</li><li>1 &lt;= coins[i] &lt;= 5000</li><li>All the values of coins are unique.</li><li>0 &lt;= amount &lt;= 5000</li></ul><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><ol><li>初始化dp[0]=1</li><li>遍歷coins，並且轉移dp[i]+=dp[i-coin]</li></ol><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> amount, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; coins)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> dp[amount+<span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> coin:coins)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=coin;i&lt;=amount;i++)<br>                <span class="hljs-keyword">if</span>(i-coin&gt;=<span class="hljs-number">0</span>)   dp[i]+=dp[i-coin];<br>        <span class="hljs-keyword">return</span> dp[amount];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>medium</tag>
      
      <tag>一維dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 字串消除 (Stack)</title>
    <link href="/2022/08/08/acw4504/"/>
    <url>/2022/08/08/acw4504/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>李華和張紅正在玩字元串消除游戲。</p><p>游戲規則如下：</p><p>給定一個由小寫字母構成的字元串 s。<br />兩人輪流進行消除操作，當輪到一人時，其任務是在當前 s 中找到兩個連續且相同的字母，並將它們從 s 中消除。例如，當 s 為 abba 時，可以消除 bb，使 s 變為 aa。<br />第一個無法進行消除操作的選手視為失敗。<br />已知，游戲由李華執先手，且兩人都採取最優策略。</p><p>請問，李華是否可以獲勝。</p><p><strong>輸入格式</strong></p><ul><li>一行，一個字元串 s。</li></ul><p><strong>輸出格式</strong></p><ul><li>如果李華可以獲勝，則輸出 Yes，否則輸出 No。</li></ul><p><strong>數據範圍</strong></p><ul><li>前 5 個測試點滿足 1≤|s|≤10。</li><li>所有測試點滿足 1≤|s|≤1e5。</li></ul><p><strong>輸入樣例1</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">abacaba</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例1</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">No</span><br></code></pre></div></td></tr></table></figure><p><strong>輸入樣例2</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">iiq</span><br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例2</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></div></td></tr></table></figure><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll ans;<br><span class="hljs-built_in">string</span> s;<br><span class="hljs-built_in">stack</span>&lt;ll&gt; ss;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;s[i];i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!ss.empty()&amp;&amp;s[i]==ss.top())  ans++,ss.pop();<br>        <span class="hljs-keyword">else</span>    ss.push(s[i]);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(ans%<span class="hljs-number">2</span>?<span class="hljs-string">&quot;Yes\n&quot;</span>:<span class="hljs-string">&quot;No\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>數據結構</category>
      
    </categories>
    
    
    <tags>
      
      <tag>acw</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trie</title>
    <link href="/2022/08/07/trie/"/>
    <url>/2022/08/07/trie/</url>
    
    <content type="html"><![CDATA[<h2 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h2><p><strong>高效存儲、查找字符串集合的數據結構</strong><br />用到Trie函數的，字符串一般是全小寫/全大寫/數字/0和1。<br /><a href="/2022/08/07/acw143/">存儲數字的Trie - 最大Xor對</a></p><h2 id="例題-存儲字串的trie"><a class="markdownIt-Anchor" href="#例題-存儲字串的trie"></a> 例題 (存儲字串的Trie)</h2><p>維護一個字元串集合，支持兩種操作：</p><ul><li>I x 向集合中插入一個字元串 x；</li><li>Q x 詢問一個字元串在集合中出現了多少次。</li></ul><p>共有 N 個操作，輸入的字元串總長度不超過 10^5，字元串僅包含小寫英文字母。</p><p><strong>輸入格式</strong></p><ul><li><p>第一行包含整數 N，表示操作數。</p></li><li><p>接下來 N 行，每行包含一個操作指令，指令為 I x 或 Q x 中的一種。</p></li></ul><p><strong>輸出格式</strong></p><ul><li><p>對於每個詢問指令 Q x，都要輸出一個整數作為結果，表示 x 在集合中出現的次數。</p></li><li><p>每個結果占一行。</p></li></ul><p><strong>數據範圍</strong></p><ul><li>1≤N≤2e4</li></ul><p><strong>輸入樣例</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-number">5</span><br><span class="hljs-selector-tag">I</span> abc<br><span class="hljs-selector-tag">Q</span> abc<br><span class="hljs-selector-tag">I</span> ab<br><span class="hljs-selector-tag">I</span> abbc<br><span class="hljs-selector-tag">Q</span> ab<br></code></pre></div></td></tr></table></figure><p><strong>輸出樣例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br>1<br></code></pre></div></td></tr></table></figure><p><strong>範例圖示</strong></p><p><img src="https://lh3.googleusercontent.com/bL0oqSbY7VRlGdGXfHUlyA4Uaeu6FsxJsTrgqAqXd5u79ZO47dp65ydtStMf6vqExMS-tfyRLPKA3bKmENCGp4vPX5NDLgtMv-rul1iprAKspOx2Lw2zVp-ZXtyT9V9s-GPA3VQGuEyo80TCuCSwbaKJF2nmoicG-9_NppiUGremBzKICkX0I3kiqReSowgm8uo5SqnxbrHRmRDRyBBFRsqmKcyvTc5CnORFXsjznyWGt0IhElWs1rNY4iit8XO9OtQRYFpF4DaHyN-V2dbYmHJNt3mNceeuEDAU-J0SJSrH4fL6x7ZP7i6uw00soZ7-qy4kJODOGLatrukuHvOJa1YVGd9DI40_-0nyp4aPVBgMOB2L7hjOMhPuiClulzZFBE_nHOy2yod6SCWsnhhPcoIWcIuXOdXgJB6w5nu_OX05KPVn6gCLCgqDw4xH_ZMg4rfTEBkATUg73h7NrkTNx3Ajxwwqvj3VlxYdhSwdyFXgOd18B5uy-JDn9_8LxSZtQsj4N-pajObLYNYB9oGpHOTZcuT_a7fb8Xt1gFJwSLGsfi3JL5RfkOfeEQUIqmTo6pcpbVDDib5E4LjWoxghPbY6q9aTGhMxgqHZ3Z32v0VJ_HeobMxiDH5To6atnAXUhz4f5L9nLyCEXBF-XFbfdzLadNyQLyUBwGucTzREnYo4OtGgBks_iTn3KIM9bXksOtsTpxDPRz1q3pmecdJgky8WgNFiqynW6jT409qIR28_C6-OE-t8lCyZ5LqrmGo=w654-h678-no?authuser=0" alt="" /></p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n;<br><span class="hljs-keyword">char</span> q;<br><span class="hljs-built_in">string</span> x;<br>ll son[MAXN][<span class="hljs-number">26</span>],cnt[MAXN],idx=<span class="hljs-number">0</span>; <span class="hljs-comment">//idx會一直累加</span><br><span class="hljs-comment">//cnt是以當前這個點為結尾的字串有幾個</span><br><span class="hljs-comment">//trie樹是從0層開始，但是下一層不一定是1層，這個是由son[p][u]里的編號idx的值決定</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-built_in">string</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;x[i];i++)<br>    &#123;<br>        ll u=x[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u])  son[p][u]=++idx; <span class="hljs-comment">//如果沒有這個子節點，就建一條路</span><br>        p=son[p][u];<br>    &#125;<br>    cnt[p]++;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-built_in">string</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;x[i];i++)<br>    &#123;<br>        ll u=x[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u])  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p=son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;q&gt;&gt;x;<br>        <span class="hljs-keyword">if</span>(q==<span class="hljs-string">&#x27;I&#x27;</span>)  insert(x);<br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">cout</span>&lt;&lt;query(x)&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>數據結構</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trie</tag>
      
      <tag>acw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>題目 - 最大Xor對 (Trie)</title>
    <link href="/2022/08/07/acw143/"/>
    <url>/2022/08/07/acw143/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>在給定的 N 個整數 A1，A2……AN 中選出兩個進行 xor運算，得到的結果最大是多少？</p><p><strong>Input</strong></p><ul><li>第一行輸入一個整數 N。</li><li>第二行輸入 N 個整數 A1～AN。</li></ul><p><strong>Output</strong></p><ul><li>輸出一個整數表示答案。</li></ul><p><strong>範圍</strong></p><ul><li>1≤N≤1e5,</li><li>0≤Ai&lt;2^31</li></ul><p><strong>输入样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">7<br></code></pre></div></td></tr></table></figure><h2 id="想法"><a class="markdownIt-Anchor" href="#想法"></a> 想法</h2><p>把數字都轉成二進位，存在陣列(樹)裡，因為要求xor過後的最大值，所以盡量找每一位不相同的。<br /><img src="https://lh3.googleusercontent.com/35qYO09hZ2MBLWKduaPPnrph109ufEibyfb0ZKkgDcbJc_fYzLAz_64Qis0IP8MbrcbrFYinJZX7GmrSkKx2zyEm7e0u4dGK4VVhBQGW_nHTK8_jahuN_0xWXWqx3ggKQm5jhTlvbkcwsJifhulzvRm8x7s1XawJwq9u1_ezXbvqWe_PXRPusdmJ_mrGAwx98velTDcMtASPrY9MtNo2KLG87gJ44Wkwgm6fuBQDB7NnwULgnKrycgCJD8Js_I3qWa0SRBTojHLi85BkZX2CRzhAcOWdKiLvYyQVUq_5-kjZZqDJzhdjgic7IhwNB2lNzInMobw5LLujutJu85n_pwB7DiVqoRzbUE2qJjtWIesMRJjbxbaBfpGM10JTOdXhxSPL35r6bJjegfxSN291aiUtzraYM7MazMPHuzzBMG2AZzqTcx6a-XbhPK7QE4EGlklKkQ38-n66dRVC0joGRw_sNfPnext94A0tBaQ9l9k_4M1EhDjSSO9UuPMHrqAT2c_mYa3HHaIQ53h9R5ZmU73ET4hj9ldcKBg3piIeenRqcHWPeBMc-PYZya3Lz37K5-TK0UUGd1WiKdUl6WWzbFhlDpdRfBNEwE3jJMl5DwH58pPa8YhD7peXxuz5weAHYxi4TKrfipHRGxCSoUFcypNKQ894a4lBcwlN0--Aj-pyuV3mwwIhfzl2vhkqnpn_yguEQuDwKX0Wss4rfdYsC-9wuCDM3OYYG-LAqHNHYYu-uMp1DwUt4w6OSf9Sqbw=w1280-h420-no?authuser=0" alt="" /></p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll n,ans,idx;<br>ll a[MAXN],son[<span class="hljs-number">31</span>*MAXN][<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">30</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u=x&gt;&gt;i&amp;<span class="hljs-number">1</span>; <span class="hljs-comment">// x第i位的二進制數</span><br>        <span class="hljs-keyword">if</span>(!son[p][u])  son[p][u]=++idx; <span class="hljs-comment">// 如果沒路，就建新的路</span><br>        p=son[p][u]; <span class="hljs-comment">// p指向idx所指的下標</span><br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll x)</span> <span class="hljs-comment">//返回第i元素前與二進制a[i]相比最多位數不同的數 </span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">30</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        ll u=x&gt;&gt;i&amp;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(son[p][!u])  <br>        &#123;<br>            p=son[p][!u];<br>            res=res*<span class="hljs-number">2</span>+!u;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            p=son[p][u];<br>            res=res*<span class="hljs-number">2</span>+u;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>        insert(a[i]);<span class="hljs-comment">//建樹</span><br>        <span class="hljs-keyword">int</span> t=query(a[i]);<span class="hljs-comment">//返回第i元素前與二進制a[i]相比最多位數不同的數 </span><br>        ans=max(ans,a[i]^t);<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>數據結構</category>
      
    </categories>
    
    
    <tags>
      
      <tag>trie</tag>
      
      <tag>acw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>換新手機拉!</title>
    <link href="/2022/08/07/newphone/"/>
    <url>/2022/08/07/newphone/</url>
    
    <content type="html"><![CDATA[<h2 id="新手機"><a class="markdownIt-Anchor" href="#新手機"></a> 新手機</h2><p>換了iphone 13 看能不能堅持個四五年了，還請多指教。</p><h2 id="specs"><a class="markdownIt-Anchor" href="#specs"></a> Specs</h2><ul><li>午夜黑</li><li>128gb</li></ul><h2 id="圖片"><a class="markdownIt-Anchor" href="#圖片"></a> 圖片</h2><p><img src="https://lh3.googleusercontent.com/s-YhjglXz8G0yF5tM4014j6CI8Uz_-YldrfYiW3pcjnOKcD2Y9DLybz_ARbQzLG0k54dlnzCzl3oYmoMH5RVPkqA8qoJYMuLj3cGJRkMLQ-hXzhrJAe3rInP3AFa-cEXrGYHcuPnNc1GpKTeOvPVhCZCpmpRbvhu5gUuf5Bs2avVAs82XTnnJ5HRhmZY1luAtCyybajnAJQieNLotYPptFbN1TZfRYQK53-f7BZiEyCe14nFZE2F9HH5hz9B8VvGaUxPQEXUeOh0I6N6tkTa_T_e0LuV-PEvjQwVgjuO7Rht-r791eTYIH5BQOGo2g2hJc7kgCA5cMGGhobaVoSALxXweCtiWCC9kzL79nstuZquRInKdqJ4bO405MWu0CAKpkMZRIpNDV43J6bTySX9UMIDKpAAJCKn6yCv0x8lGq097TlPseSxvMbQTZUJeGzK6FyL1uSgN71o33pjwRQzPGyNZ7A5_ywlWcedE75iZoNoz7ykn9jh4OzsvtkE5aEgmD8qsQXIMmkLfRv6gHxZblxKffJvBaF2vXB809c4kpXpbg3Qh35oYM2Pgtm1N7443MqXVvj5i0rCvNXELfwYlrlELLzkEz9oLpX5vj_HnFISnVyd-xt7D7_HSOdBnKB63YKv3frrPouePFgXWUuUJN9TGc_kiK1tZqF0yp6ZYicw3orL1c9GUTA8ELtsGbtKmQNqWEXxXVvo3uRwPuq-xNa6eFUnkQ6ZcZdOFJqzr0PJw-nTVTPOjpbiEOB0is0=w1659-h933-no?authuser=0" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>手機</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 812 (Div. 2) A-C</title>
    <link href="/2022/08/07/cf812div2/"/>
    <url>/2022/08/07/cf812div2/</url>
    
    <content type="html"><![CDATA[<h1 id="a-traveling-salesman-problem"><a class="markdownIt-Anchor" href="#a-traveling-salesman-problem"></a> A Traveling Salesman Problem</h1><p><a href="https://codeforces.com/contest/1713/problem/A">題目連結</a><br />a=x軸最大值<br />b=x軸最小值(負數)<br />c=y軸最大值<br />d=y軸最小值(負數)<br />ans=2*a+(-2)<em>b+2</em>c+(-2)*d</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll t,n,x,y,a,b,c,d,ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    a=<span class="hljs-number">0</span>,b=<span class="hljs-number">0</span>,c=<span class="hljs-number">0</span>,d=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        a=max(a,x);<br>        b=min(b,x);<br>        c=max(c,y);<br>        d=min(d,y);<br>    &#125;<br>    ans=<span class="hljs-number">2</span>*a+<span class="hljs-number">-2</span>*b+<span class="hljs-number">2</span>*c+<span class="hljs-number">-2</span>*d;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)  solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="b-optimal-reduction"><a class="markdownIt-Anchor" href="#b-optimal-reduction"></a> B Optimal Reduction</h1><p><a href="https://codeforces.com/contest/1713/problem/B">題目連結</a><br />判斷所給陣列 最大值元素往左及往右是否呈遞減型態</p><h2 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll t,n,ans;<br>ll a[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(a));<br>    ll c=<span class="hljs-number">0</span>,cc=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<span class="hljs-built_in">cin</span>&gt;&gt;a[i]; c=max(c,a[i]);&#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-keyword">if</span>(a[i]==c) cc=i;<br>    <span class="hljs-keyword">for</span>(ll i=cc;i&lt;n<span class="hljs-number">-1</span>;i++)    <span class="hljs-keyword">if</span>(a[i]&lt;a[i+<span class="hljs-number">1</span>])   ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=cc;i&gt;<span class="hljs-number">0</span>;i--)    <span class="hljs-keyword">if</span>(a[i]&lt;a[i<span class="hljs-number">-1</span>])   ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(ans==<span class="hljs-number">1</span>?<span class="hljs-string">&quot;YES\n&quot;</span>:<span class="hljs-string">&quot;NO\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)  solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="c-build-permutation"><a class="markdownIt-Anchor" href="#c-build-permutation"></a> C Build Permutation</h1><p><a href="https://codeforces.com/contest/1713/problem/C">題目連結</a></p><h2 id="code-3"><a class="markdownIt-Anchor" href="#code-3"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> ll MAXN = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>ll t,n,x,ans;<br>ll a[MAXN],b[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(a));<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) a[i]=<span class="hljs-number">0</span>;<br>    ll c=<span class="hljs-number">2</span>*(n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(ll i=c;i&gt;=<span class="hljs-number">0</span>;i--)    <span class="hljs-keyword">if</span>((ll)<span class="hljs-built_in">sqrt</span>(i)*(ll)<span class="hljs-built_in">sqrt</span>(i)==i)   &#123;c=<span class="hljs-built_in">sqrt</span>(i);<span class="hljs-keyword">break</span>;&#125; <span class="hljs-comment">//判斷是否為完全平方數</span><br>    <span class="hljs-keyword">for</span>(ll i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        ll ii=c*c-i;<br>        <span class="hljs-keyword">while</span>(a[ii]!=<span class="hljs-number">0</span>)<br>        &#123;<br>            c--;<br>            ii=c*c-i;<br>        &#125;<br>        a[ii]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)  solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 322 - Coin Change I (一維dp)</title>
    <link href="/2022/08/05/leetcode322/"/>
    <url>/2022/08/05/leetcode322/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/coin-change/">連結</a>(Medium)</p><h2 id="題目"><a class="markdownIt-Anchor" href="#題目"></a> 題目</h2><p>You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.</p><p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p><p>You may assume that you have an infinite number of each kind of coin.<br /><strong>Example 1:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> coins = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>], amount = <span class="hljs-number">11</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">Explanation:</span> <span class="hljs-number">11</span> = <span class="hljs-number">5</span> + <span class="hljs-number">5</span> + <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> coins = [<span class="hljs-number">2</span>], amount = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">-1</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> coins = [<span class="hljs-number">1</span>], amount = <span class="hljs-number">0</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>1 &lt;= coins.length &lt;= 12</li><li>1 &lt;= coins[i] &lt;= 231 - 1</li><li>0 &lt;= amount &lt;= 104</li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; coins, <span class="hljs-keyword">int</span> amount)</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount+<span class="hljs-number">1</span>,amount+<span class="hljs-number">1</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> coin:coins)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=coin;i&lt;=amount;i++)<br>            &#123;<br>                dp[i]=min(dp[i],dp[i-coin]+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[amount]==amount+<span class="hljs-number">1</span>?<span class="hljs-number">-1</span>:dp[amount];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>medium</tag>
      
      <tag>一維dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ - Vector (STL)</title>
    <link href="/2022/08/05/vector/"/>
    <url>/2022/08/05/vector/</url>
    
    <content type="html"><![CDATA[<div class="hljs code-wrapper"><pre class="highlight"><code class="C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">//宣告一長度10 元素值皆為0的vector</span>    v.push_back(<span class="hljs-number">1</span>); <span class="hljs-comment">//將1插入vector的最後一個位置 </span>    v.pop_back(); <span class="hljs-comment">//刪除vector的最後一個元素 O(1)</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : v) <span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">" "</span>;    v.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">//清空vector</span>    sort(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">//將vector排序</span>    v.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">//取得vector的長度</span>    v.empty(); <span class="hljs-comment">//判斷vector是否為空 返回值為true或false</span>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span>,<span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">//vector可以比大小(字典序)</span>    <span class="hljs-keyword">if</span>(a&gt;b) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"a"</span>; <span class="hljs-comment">//印出"a"</span>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"b"</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
      <category>數據結構</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HP Codewars 2022 小心得</title>
    <link href="/2022/05/15/HP_codewars/"/>
    <url>/2022/05/15/HP_codewars/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>今年因為疫情原因，與以往不同，一隊只能一人(名額50個，官方說前三名可以到HP實習)，但也許是第一年舉辦大學場次的原因，獎品特別多(中獎率超過50%(當然如果你跟我一樣沒那個命的話 那還是不會中))，而且場地好豪華w。<br /><img src="https://lh3.googleusercontent.com/pw/AM-JKLW7uXmonA1BcGyKy673SAIFwTlWp_3utUJhg_vWC7mHaU8r87pVatcBntUy97I9-EhQcksWBjHNVgHxUSWTqAAVxPOzw9Upg8_KIHPKy5fR-9QCvtDJ7FNT2Gz2QZhHUxvYVycxAc8tPuD_IFu7p5kxSw=w1920-h865-no?authuser=0" alt="" /></p><h1 id="考前"><a class="markdownIt-Anchor" href="#考前"></a> 考前</h1><p>主辦單位有提供高級午餐盒、一芳飲料跟比賽衣服，還有大概半小時的有獎徵答(就是跟你講贊助商Intel、HP、HPE在做啥的，中間有HP的主管出來說歡迎大學生多來HP實習之類的事)<br /><img src="https://lh3.googleusercontent.com/pw/AM-JKLUGWTsz-GQbGSydSxTHS_KoN6TYDlpuZrPsd0awi1yf2W-gmF1WteTvc4bSkD2S0VC4ZZ6CtnSgCJfiBP2Cvkm5Jg8jF0rfosIIvMGgy8h4GnRtPuNf637wosgcBy3v2ImD44VTJ1yZ84xkwrn7tPPT0Q=w1920-h865-no?authuser=0" alt="" /><br /><img src="https://lh3.googleusercontent.com/pw/AM-JKLVVz6LKboaychICfYuq8Ht7CVKB9aqhI-3FzVYCB607z0PlHZ08GyvIMHC3eODWkIyNMFibGGR9jIi6OTaxtOZwQgmPG2pFIQ0YOY5ztbk2s55po-PMy5oo35VhzyBgAoIgLcuiGJskB90qF0JKpVsPEg=w1920-h865-no?authuser=0" alt="" /></p><h1 id="考試"><a class="markdownIt-Anchor" href="#考試"></a> 考試</h1><p>考試用的是Codewars自己的評分介面，這次題目總共15題，滿分300分，一題50分Hello World題目，其他我覺得整體比高中場次難些，這裡就不說我答幾題了…只是個菜機，但我覺得HP出的題目對C/C++的不友善w，很多輸入要處理很麻煩，不像codeforces那樣都不用管；另外，HP的題目基本上就只有題目敘述+一筆測資，不像一般看到的題目有時間限制、記憶體限制，提交後錯誤，也不會說是WA還是TLE。</p><h1 id="結語"><a class="markdownIt-Anchor" href="#結語"></a> 結語</h1><p>總之，能參加這次比賽還是挺高興的，主辦單位真的砸很多錢，而且只要填一個表單就能參加，很佛，希望明年還能再來!</p><p><em>last updated 22/05/15 21:53</em></p>]]></content>
    
    
    <categories>
      
      <category>心得</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Codewars</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做一個Youtube音樂電台 [24/7]</title>
    <link href="/2022/04/22/vps_247/"/>
    <url>/2022/04/22/vps_247/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>從三四年前開始，youtube上的24/7音樂電台雨後春筍般地出現，那時我就有想自己架設一個電台的想法，然而我的技術能力及硬體設備都不足，只好作罷。<br />最近因學校社團有幫我們弄DigitalOcean的充5美金送100美金，於是我就把這些Credits拿去架了一個Youtube電台，查了網上許多教學，這邊把學習歷程打成文章，參考參考。</p><p><strong>注意事項</strong>: 我原本是打算用OBS的，但後來發現OBS需要gpu才能運作，而這個虛擬機沒有gpu所以跑不了…，事故使用ffmpeg，如果你的虛擬機有gpu的話，可以直接裝OBS。</p><h1 id="硬體規格"><a class="markdownIt-Anchor" href="#硬體規格"></a> 硬體規格</h1><p>我這邊選用的是一般CPU的 4gb ram版本，一個月20美金，這樣的規格夠720p 24fps的直播，當然如果你希望有更高的解析度，就花多一點錢。<br /><img src="/img/photo_2022-03-07_15-52-55.jpg" alt="" /><br />我這樣實測下來，ram大概使用50%，流量每秒1.6mb。</p><h1 id="軟體"><a class="markdownIt-Anchor" href="#軟體"></a> 軟體</h1><h2 id="客戶端"><a class="markdownIt-Anchor" href="#客戶端"></a> 客戶端</h2><ol><li><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">Putty</a> - 用來連虛擬機的程式(當然如果你直接ssh也是可以)</li><li><a href="https://filezilla-project.org/download.php">FileZilla</a> - 將所要直播的背景影片上傳至虛擬機</li></ol><h2 id="虛擬機"><a class="markdownIt-Anchor" href="#虛擬機"></a> 虛擬機</h2><ol><li>Azuracast - DigitalOcean有內建一鍵安裝，裝好後去Azuracast頁面先註冊好帳號，然後操作基本設定。如果你不是使用DigitalOcean的話，需要自己安裝Azuracast。</li></ol><h1 id="步驟"><a class="markdownIt-Anchor" href="#步驟"></a> 步驟</h1><ol><li><p>[Azuracast] 進去Azuracast設定頁面將所有要撥放的音樂mp3檔案上傳至播放列表的Default。<br /><img src="/img/image_2022-03-07_15-10-35.png" alt="" /><br />上傳完音樂，並把音樂加入播放表後，可以至 <strong>個人資料</strong> &gt; <strong>廣播服務</strong> 按開始，現在去 <strong>公開頁面</strong> 就會看到電台開始運作了，</p></li><li><p>[Filezilla] 把背景影片檔案透過Filezilla上傳至虛擬機，記得將該檔案在虛擬機上的位置記下。<br />首先選擇左上角，新增一個站台。<br /><img src="/img/image_2022-03-07_15-14-16.png" alt="" /><br />選擇sftp，接著輸入你的虛擬機ip及使用者帳密。<br /><img src="/img/photo_2022-03-07_15-17-40.jpg" alt="" /></p></li><li><p>[虛擬機] 安裝ffmpeg (可以用obs的人可以不用ffmpeg)<br />用putty連線到虛擬機，在終端機輸入:</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt install ffmpeg<br></code></pre></div></td></tr></table></figure><ol start="4"><li>開始運行直播!<br />將下面的指令複製，把參數改成自己的:</li></ol><ul><li>KEY - youtube直播key</li><li>VIDEO_SOURCE - 背景影片在虛擬機上的位置</li><li>AUDIO_SOURCE - 音樂播放的位置(如果你用Azuracast的話，直接打http://localhost:8000/radio.mp3)</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br>VBR=<span class="hljs-string">&quot;1500k&quot;</span><br>FPS=<span class="hljs-string">&quot;24&quot;</span><br>QUAL=<span class="hljs-string">&quot;superfast&quot;</span><br><br>YOUTUBE_URL=<span class="hljs-string">&quot;rtmp://a.rtmp.youtube.com/live2&quot;</span><br>KEY=<span class="hljs-string">&quot;你的Youtube直播key&quot;</span><br><br>VIDEO_SOURCE=<span class="hljs-string">&quot;背景影片檔案位置.mp4&quot;</span><br>AUDIO_SOURCE=<span class="hljs-string">&quot;http://localhost:8000/radio.mp3&quot;</span><br><br>ffmpeg \<br>    -re -f lavfi -i <span class="hljs-string">&quot;movie=filename=<span class="hljs-variable">$VIDEO_SOURCE</span>:loop=0, setpts=N/(FRAME_RATE*TB)&quot;</span> \<br>    -thread_queue_size 512 -i <span class="hljs-string">&quot;<span class="hljs-variable">$AUDIO_SOURCE</span>&quot;</span> \<br>    -map 0:v:0 -map 1:a:0 \<br>    -map_metadata:g 1:g \<br>    -vcodec libx264 -pix_fmt yuv420p -preset <span class="hljs-variable">$QUAL</span> -r <span class="hljs-variable">$FPS</span> -g $((<span class="hljs-variable">$FPS</span> * <span class="hljs-number">2</span>)) -b:v <span class="hljs-variable">$VBR</span> \<br>    -acodec libmp3lame -ar 44100 -threads 6 -qscale:v 3 -b:a 320000 -bufsize 512k \<br>    -f flv <span class="hljs-string">&quot;<span class="hljs-variable">$YOUTUBE_URL</span>/<span class="hljs-variable">$KEY</span>&quot;</span><br></code></pre></div></td></tr></table></figure><p>改好後，用putty連線到虛擬機，將整串指令複製起來，貼上終端機，按enter開始運行。<br />沒意外的話，直播就會開始了。<br /><img src="/img/photo_2022-03-07_15-26-30.jpg" alt="" /></p><h1 id="硬體使用量"><a class="markdownIt-Anchor" href="#硬體使用量"></a> 硬體使用量</h1><ol><li>CPU<br /><img src="/img/photo_2022-03-07_15-30-20.jpg" alt="" /></li><li>RAM<br /><img src="/img/photo_2022-03-07_15-31-21.jpg" alt="" /></li><li>Bandwidth<br /><img src="/img/photo_2022-03-07_15-31-56.jpg" alt="" /></li></ol><h1 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h1><ol><li><a href="https://okhlopkov.medium.com/how-to-create-your-24-7-youtube-online-radio-ca9e6834c192">How to create your 24/7 YouTube online radio</a> - Medium</li><li><a href="https://www.youtube.com/watch?v=9Jj0pVKRaOE">YouTube Live Stream from Free VPS without OBS</a> - Youtube</li></ol>]]></content>
    
    
    <categories>
      
      <category>心得</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教學</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS50筆記 Lecture 8 - HTML, CSS, JavaScript</title>
    <link href="/2022/02/21/cs50_frontend/"/>
    <url>/2022/02/21/cs50_frontend/</url>
    
    <content type="html"><![CDATA[<h1 id="internet"><a class="markdownIt-Anchor" href="#internet"></a> Internet</h1><p>Big storage: Cloud<br />A bunch of data we can all reach wirelessly.<br /><img src="/img/image_2022-02-21_21-40-01.png" alt="The ARPANET in 1969" /><br />Router: taken the data and decide to send it this way or that way.<br />How to send a packet , send it one router by router</p><h2 id="tcpip"><a class="markdownIt-Anchor" href="#tcpip"></a> TCP/IP</h2><p>IP: #.#.#.# (each # is 1-255(8 bits)), so it means that an IP address must use 32 bits or 4 bytes</p><p>IPv4: 32bits IPv6: 128bits(cuz there are too many devices nowadays) 128bits -&gt; crazy amounts of devices</p><h3 id="tcp"><a class="markdownIt-Anchor" href="#tcp"></a> TCP</h3><p>Transmission Control Protocol</p><h3 id="ip"><a class="markdownIt-Anchor" href="#ip"></a> IP</h3><h2 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h2><p>Domain Name Service (Translate domain name to ip address)</p><h2 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h2><p>Hyper Text Transfer Protocol<br />A final protocol that web browsers use to communicate with servers.(Build on top of the Internet)</p><p>HTTPS: Secure HTTP</p><p>Format: <a href="https://jinlk.site/">https://jinlk.site/</a> (斜線指該網站的root資料夾 通常不顯示)</p><ul><li>jinlk.site : Domain name</li><li>www : a specific server in that domain (it is actually refer to lots of servers nowadays)</li><li>.site: top level domain (probably known .com .org .net .edu)</li></ul><h2 id="getpost"><a class="markdownIt-Anchor" href="#getpost"></a> GET/POST</h2><p>GET: Get data from the server</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>看起來像這樣 第一個<span class="hljs-string">&#x27;/&#x27;</span>代表檔案夾位置<br><span class="hljs-regexp">//</span> Request<br>GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br>Host: jinlk.site<br></code></pre></div></td></tr></table></figure><p>現在很多網站託管服務像wix / wordpress, 他們其實只有一個大伺服器，當收到client的請求後 得知被詢問的url，就會去伺服器內尋找這個webpage然後回傳給client。</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-comment">// Response</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">text</span>/html <span class="hljs-comment">// 檔案形式</span><br></code></pre></div></td></tr></table></figure><ul><li>可以用Curl測試看看網址</li></ul><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">curl</span> -I -X <span class="hljs-meta">GET</span> https:<span class="hljs-comment">//jinlk.site/</span><br></code></pre></div></td></tr></table></figure><ul><li>如果沒問題可以看到200</li><li>如果沒有該位置則404</li></ul><p><img src="/img/image_2022-02-21_22-49-45.png" alt="" /></p><p>POST: Send data to the server<br /><img src="/img/image_2022-02-21_22-33-02.png" alt="左client 右server" /></p><h1 id="front-end-language"><a class="markdownIt-Anchor" href="#front-end-language"></a> Front-end Language</h1><p>HTML: Hyper Text Markup Language<br />CSS: Cascading Style Sheets<br />Javascript: JavaScript</p><h2 id="html"><a class="markdownIt-Anchor" href="#html"></a> HTML</h2><p>Example: <a href="/2022/02/21/hello_example/">示範頁面</a></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> <br>            hello, world<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        This is under body tag.<br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Order list 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Order list 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 1 info<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 2 info<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;This is an image.(don&#x27;t need a close tag&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">/img/android.png</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">allowfullscreen</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.youtube.com/watch?v=F68sQYaS9XA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>        This is a Hyper link tag <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://jinlk.site/&quot;</span>&gt;</span>jinlk.site<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>usually body tag contain almost 90% of the content</li></ul><h2 id="css"><a class="markdownIt-Anchor" href="#css"></a> CSS</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>競程筆記</title>
    <link href="/2022/02/17/cpnote/"/>
    <url>/2022/02/17/cpnote/</url>
    
    <content type="html"><![CDATA[<h1 id="基本架構"><a class="markdownIt-Anchor" href="#基本架構"></a> 基本架構</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//Author: Jinlk</span><br><span class="hljs-comment">//https://jinlk.site</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO cin.tie(0);ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">50</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        IO;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="方便加速程式"><a class="markdownIt-Anchor" href="#方便加速程式"></a> 方便/加速程式</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//避免自動輸出緩衝區</span><br><br>ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">//c++跟c不混用</span><br><br>cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>; <span class="hljs-comment">//避免自動輸出緩衝區</span><br></code></pre></div></td></tr></table></figure><p><a href="https://hackmd.io/@wiwiho/CPN-io-optimization">I/O優化</a></p><h1 id="時間複雜度"><a class="markdownIt-Anchor" href="#時間複雜度"></a> 時間複雜度</h1><p>每秒10^8次</p><h1 id="前綴和差分"><a class="markdownIt-Anchor" href="#前綴和差分"></a> 前綴和&amp;差分</h1><ul><li>前綴和 <a href="https://oi-wiki.org/basic/prefix-sum/">oi-wiki</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> a[n+<span class="hljs-number">1</span>],sum[n+<span class="hljs-number">1</span>]; <span class="hljs-comment">//捨棄a[0]</span><br>    cin&gt;&gt;a[<span class="hljs-number">1</span>];<br>    sum[<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;n+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        sum[i]=sum[i<span class="hljs-number">-1</span>]+a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>二维/多维前缀和</li></ul><p>一個二維陣列A:</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><p>其前缀和為:</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span> <span class="hljs-number">3</span>  <span class="hljs-number">7</span>  <span class="hljs-number">10</span><br><span class="hljs-symbol">6 </span> <span class="hljs-number">9</span>  <span class="hljs-number">15</span> <span class="hljs-number">22</span><br><span class="hljs-symbol">12 </span><span class="hljs-number">18</span> <span class="hljs-number">29</span> <span class="hljs-number">45</span><br></code></pre></div></td></tr></table></figure><p>範例程式碼:</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a[<span class="hljs-number">103</span>][<span class="hljs-number">103</span>];<br><span class="hljs-keyword">int</span> b[<span class="hljs-number">103</span>][<span class="hljs-number">103</span>];  <span class="hljs-comment">// 前缀和数组，相当于上文的 sum[]</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> n, m;<br>  cin &gt;&gt; n &gt;&gt; m;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>      cin &gt;&gt; a[i][j];<br>      b[i][j] =<br>          b[i][j - <span class="hljs-number">1</span>] + b[i - <span class="hljs-number">1</span>][j] - b[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + a[i][j];  <span class="hljs-comment">// 求前缀和</span><br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><p>例題: <a href="https://leetcode.com/problems/maximal-square/">leetcode Maximal Square</a><br />程式碼:</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//Author: Jinlk</span><br><span class="hljs-comment">//https://leetcode.com/problems/maximal-square/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maximalSquare</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n=matrix.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">//4</span><br>        <span class="hljs-keyword">int</span> m=matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); <span class="hljs-comment">//5</span><br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;  <span class="hljs-built_in">b</span>(n+<span class="hljs-number">1</span>,vector&lt;<span class="hljs-keyword">int</span>&gt;(m+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)); <span class="hljs-comment">//用來存前綴和</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>                b[i][j]=b[i][j<span class="hljs-number">-1</span>]+b[i<span class="hljs-number">-1</span>][j]-b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+matrix[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,l=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt;= <span class="hljs-built_in">min</span>(n, m))<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt;= n; i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = l; j &lt;= m; j++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (b[i][j] - b[i - l][j] - b[i][j - l] + b[i - l][j - l] == l * l) <br>                        ans = <span class="hljs-built_in">max</span>(ans, l); <br>                &#125;<br>            &#125;<br>            l++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans*ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h1 id="二分搜"><a class="markdownIt-Anchor" href="#二分搜"></a> 二分搜</h1><p><a href="https://oi-wiki.org/basic/binary/">oi wiki</a><br />是用来在一个有序数组中查找某一元素的算法，時間複雜度O(logn)算法每次都把查询的区间减半，所以对于一个长度为n的数组，至多会进行O(logn)次查找。</p><h1 id="stl"><a class="markdownIt-Anchor" href="#stl"></a> STL</h1><h2 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> Vector</h2><p><a href="https://hackmd.io/@tonychi/rye6XcL6K#/1/2">PCCA寒訓</a></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br>vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br> <br>v.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// v 的長度</span><br>v.<span class="hljs-built_in">resize</span>(n); <span class="hljs-comment">// 調整大小為 n</span><br>v.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">// 初始化 v</span><br>v.<span class="hljs-built_in">push_back</span>(val); <span class="hljs-comment">// 放 val 在 v 後面</span><br>v.<span class="hljs-built_in">begin</span>(); v.<span class="hljs-built_in">end</span>(); <span class="hljs-comment">// v 的 iterator</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">//宣告v 長度n 初始值0</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">v.<span class="hljs-built_in">push_back</span>(val); <span class="hljs-comment">//把 val 的值複製進去</span><br>v.<span class="hljs-built_in">emplace_back</span>(val); <span class="hljs-comment">//把 val 做為參數來宣告</span><br><span class="hljs-comment">//速度上幾乎沒差 除非你 push_back() 一個很大的東西</span><br><br><span class="hljs-comment">// emplace_back() 的好處在於它可以減少「宣告」的繁瑣</span><br>vector&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; arr;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    arr.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)); <br>        <span class="hljs-comment">// 要先產生 pair 才可以被複製</span><br>    <br>    arr.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-comment">// 簡潔許多</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">v.<span class="hljs-built_in">resize</span>(n); <span class="hljs-comment">//把 v 長度設為 n</span><br>v.<span class="hljs-built_in">resize</span>(n, <span class="hljs-number">0</span>); <span class="hljs-comment">//如果 v 需要增加長度，值會是 0已存在的值不會被改變！！</span><br>v.<span class="hljs-built_in">assign</span>(n, <span class="hljs-number">0</span>); <span class="hljs-comment">//把 v 初始化成長度為 n且值為 0</span><br></code></pre></div></td></tr></table></figure><p>請不要用 erase(), insert()，vector 是連續儲存的，所以移除或插入在中間會需要 O(n)的時間。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//iterator</span><br>v.<span class="hljs-built_in">begin</span>(); <span class="hljs-comment">//回傳指向第 0 個的 iterator</span><br>v.<span class="hljs-built_in">end</span>(); <span class="hljs-comment">//回傳指向最後一項的下一項的 iterator</span><br><span class="hljs-comment">//所以 v.begin() 到 v.end() 是左閉右開</span><br><br>v.<span class="hljs-built_in">rbegin</span>(); <span class="hljs-comment">//回傳指向最後一項的 iterator</span><br>v.<span class="hljs-built_in">rend</span>(); <span class="hljs-comment">//回傳指向第 0 項的前一項的 iterator</span><br><br><span class="hljs-comment">//迴圈</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> &amp;i: v) cin &gt;&gt; i; <span class="hljs-comment">// 輸入 10 個東西到 v</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>        cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; <span class="hljs-comment">// 記得加 * 在變數前面來取值</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="binary-exponentiation"><a class="markdownIt-Anchor" href="#binary-exponentiation"></a> Binary Exponentiation</h1><ul><li>例題: <a href="//https://codeforces.com/problemset/problem/630/I">codeforces 630 I</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//Author: Jinyulink</span><br><span class="hljs-comment">//https://codeforces.com/problemset/problem/630/I</span><br><span class="hljs-comment">//Binary Exponentiation</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binpow</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = res * a;<br>        a = a * a;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> res=<span class="hljs-number">24</span>*<span class="hljs-built_in">binpow</span>(<span class="hljs-number">4</span>,n<span class="hljs-number">-3</span>)+(n<span class="hljs-number">-3</span>)*<span class="hljs-number">36</span>*<span class="hljs-built_in">binpow</span>(<span class="hljs-number">4</span>,n<span class="hljs-number">-4</span>);<br>    cout&lt;&lt;res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>例題: <a href="https://cses.fi/problemset/task/1617">CSES Bit Strings</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//Author: Jinlk</span><br><span class="hljs-comment">//https://cses.fi/problemset/task/1617</span><br><span class="hljs-comment">//Binary Exponentiation</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">binpow</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> b, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> m)</span> </span>&#123;<br>    a %= m;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = res * a % m;<br>        a = a * a % m;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    cout&lt;&lt;<span class="hljs-built_in">binpow</span>(<span class="hljs-number">2</span>,n,<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,<span class="hljs-number">9</span>)+<span class="hljs-number">7</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="sieve-of-eratosthenes找質數"><a class="markdownIt-Anchor" href="#sieve-of-eratosthenes找質數"></a> Sieve of Eratosthenes(找質數)</h1><ul><li>例題: <a href="https://codeforces.com/problemset/problem/230/B">Codeforces 230 B</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//Author: Jinyulink</span><br><span class="hljs-comment">//https://codeforces.com/problemset/problem/230/B</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prime_check</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<span class="hljs-comment">//Seive of Eratosthenes 判斷質數 a[x]=0的話 n就是質數</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">prime_check</span>();<br>    <span class="hljs-keyword">while</span>(n--) <br>    &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> x;<br>        cin&gt;&gt;x;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> s=<span class="hljs-built_in">sqrt</span>(x); <span class="hljs-comment">// sqrt </span><br>        <span class="hljs-keyword">if</span>((s*s)==x&amp;&amp;x!=<span class="hljs-number">1</span>&amp;&amp;!a[s])<br>            cout&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prime_check</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">1000000</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;i*j&lt;=<span class="hljs-number">1000000</span>;j++)<br>                a[i*j]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="disjoint-set-union"><a class="markdownIt-Anchor" href="#disjoint-set-union"></a> Disjoint Set Union</h1><ul><li>例題: <a href="https://codeforces.com/problemset/problem/1609/D">Codeforces 1609 D</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//Author: Jinlk</span><br><span class="hljs-comment">//https://codeforces.com/problemset/problem/1609/D</span><br><span class="hljs-comment">//Disjoint Set Union DSU https://cp-algorithms.com/data_structures/disjoint_set_union.html</span><br><span class="hljs-comment">//NCTU PCCA 寒訓 https://www.youtube.com/watch?v=8dsEw2ndqCI</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO ios_base::sync_with_stdio(0);cin.tie(0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> vt vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n,d,t=<span class="hljs-number">0</span>;<br>vt&lt;<span class="hljs-keyword">int</span>&gt; parent,sz;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(v==parent[v])    <span class="hljs-keyword">return</span> v;<br>    <span class="hljs-keyword">return</span> parent[v]=<span class="hljs-built_in">find_set</span>(parent[v]); <span class="hljs-comment">//path compression</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">union_sets</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    a=<span class="hljs-built_in">find_set</span>(a);<br>    b=<span class="hljs-built_in">find_set</span>(b);<br>    <span class="hljs-keyword">if</span>(a!=b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(sz[a]&lt;sz[b]) <span class="hljs-built_in">swap</span>(a,b); <span class="hljs-comment">//啟發式合併</span><br>        parent[b]=a;<br>        sz[a]+=sz[b];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IO,cin&gt;&gt;n&gt;&gt;d;<br>    parent.<span class="hljs-built_in">resize</span>(n);<br>    sz.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    parent[i]=i,sz[i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;d;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x,y,ans=<span class="hljs-number">0</span>;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find_set</span>(x<span class="hljs-number">-1</span>)==<span class="hljs-built_in">find_set</span>(y<span class="hljs-number">-1</span>))    t++; <span class="hljs-comment">//檢查是否在同一集合</span><br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">union_sets</span>(x<span class="hljs-number">-1</span>,y<span class="hljs-number">-1</span>);<br>        vt&lt;<span class="hljs-keyword">int</span>&gt; tmp;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    <span class="hljs-keyword">if</span>(parent[i]==i)    tmp.<span class="hljs-built_in">pb</span>(sz[i]);<br>        <span class="hljs-built_in">sort</span>(tmp.<span class="hljs-built_in">rbegin</span>(),tmp.<span class="hljs-built_in">rend</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t+<span class="hljs-number">1</span>;i++)    ans+=tmp[i];<br>        cout&lt;&lt;ans<span class="hljs-number">-1</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="dynamic-programming"><a class="markdownIt-Anchor" href="#dynamic-programming"></a> Dynamic Programming</h1><h2 id="lis-longest-increasing-subsequence"><a class="markdownIt-Anchor" href="#lis-longest-increasing-subsequence"></a> LIS (Longest Increasing Subsequence)</h2><p>最长<strong>连续</strong>不下降子序列，因为是连续的，所以只要与上一个元素进行比较即可:</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br><span class="hljs-comment">// C++ Version</span><br><span class="hljs-keyword">int</span> a[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> now = <span class="hljs-number">1</span>, ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (a[i] &gt;= a[i - <span class="hljs-number">1</span>])<br>      now++;<br>    <span class="hljs-keyword">else</span><br>      now = <span class="hljs-number">1</span>;<br>    ans = <span class="hljs-built_in">max</span>(now, ans);<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CPE體驗心得</title>
    <link href="/2021/12/22/CPE-first-time/"/>
    <url>/2021/12/22/CPE-first-time/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>CPE類似於大學版的APCS，並且都是免費的(讚)。由於是第一次考，經驗不多，把試場一些注意事項寫下來，解題部分看看就好，比我強的人大有人在，也歡迎大老在底下留言，交流交流。</p><h1 id="考前"><a class="markdownIt-Anchor" href="#考前"></a> 考前</h1><p>高中有打C++解題的經歷，所以對基本語法還算OK，不過沒什麼演算法基礎。考前幾週有去codeforces打了兩場比賽跟開始做CPE官網列出的<a href="https://cpe.cse.nsysu.edu.tw/environment.php">一顆星題(共49題)</a>，不過我沒有每題都打完(懶)，大概看了三十幾題就來考了。</p><h1 id="考試"><a class="markdownIt-Anchor" href="#考試"></a> 考試</h1><p>考場就是學校資工系的電腦教室，座位隨便坐，前面有快一個小時的時間給你測試系統，建議要考的人先在家自己熟悉一下，不要像我一開始不熟悉緊張得要死…，CPE是採用<a href="http://coding-frenzy.arping.me/">瘋狂程設</a>這套軟體(介面十分古老)。<br />考試可以帶筆，用試場提供的規則紙張當計算紙。</p><h2 id="考試介面"><a class="markdownIt-Anchor" href="#考試介面"></a> 考試介面</h2><p>介面很簡單，分成上─題目、中─Code、下─輸出，右邊有編譯後的狀態 (AC, TLE, WA 等)、Compiler 訊息、input/output 資料，此外，系統有英漢字典跟<strong>C/C++參考資料</strong>可以查，挺佛心的，同時可以看到即時排名，包含教室排名(你所在考場的排名)及全國排名，但排名有時會出現教室排名更新了，全國的卻還沒更新的情況，請已教室排名顯示的解題紀錄為主，因為全國考場會每五分鐘傳一次資料到中山大學伺服器(CPE主辦單位)，難免會有塞車情形，可以過個再五分鐘按f5刷新。</p><p>此外，題目會有兩種按鈕，<strong>看題</strong>跟<strong>解題</strong>，可以先把題目看完後，再按解題開始code，看題時間不會記錄到解題時間內。</p><p><img src="/img/%E7%98%8B%E7%8B%82.png" alt="瘋狂程設介面" /></p><h2 id="第一次考試"><a class="markdownIt-Anchor" href="#第一次考試"></a> 第一次考試</h2><p><a href="https://cpe.cse.nsysu.edu.tw/cpe/test_data/2021-12-21">題目</a></p><ol><li><p>[x] 點開第一題，大概想了五分鐘，先把大概的程式碼寫在紙上後，按下解題，開始code，幸運的思路沒錯，不用修改code就拿到第一個<font color=#4DC44B>AC</font>，不過美好的開始不代表會一直美好下去…</p></li><li><p>[x] 第二題想了大概二十分鐘吧，原本以為只有質數有可能為解，打算用<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95">Sieve of Eratosthenes</a>判斷質數後，判斷答案，仔細想了想才發現不一定，最後用基於<strong>Sieve of Eratosthenes</strong>的方法修改了一下思路，最後總共花了36分鐘拿到<font color=#4DC44B>AC</font>。</p></li><li><p>[x] 接下來由於看到第三題感覺比較複雜，就先跳到第四題了，大概花了十幾分鐘，用了雙層迴圈拿到<font color=#4DC44B>AC</font>，但這方法似乎沒有很好。</p></li></ol><ul><li>目前為止對我來說都還挺順利，但接下來…</li></ul><ol start="4"><li><p>第三題我印象深刻(<a href="https://zerojudge.tw/ShowProblem?problemid=c082">UVA00118</a>)，機器人走路這題搞了我快兩小時…，慢慢手刻每一行Code，當我還在尋思程式哪裡出錯時，考試最後十分鐘，我才發現我搞錯題意了…，但為時已晚…</p></li><li><p>5-7題還不敢碰，演算法沒什麼基礎Σ(lliдﾟﾉ)ﾉ</p></li></ol><p>第一次考CPE拿下三題，符合我的預期，但很嘔的是原本如果仔細看題目，應該能拿到四題的說…，總之打算明年三月再去考一次，這段期間希望自己多刷一些題跟學演算法吧!</p><h2 id="第二次考試"><a class="markdownIt-Anchor" href="#第二次考試"></a> 第二次考試</h2><p><a href="https://cpe.cse.nsysu.edu.tw/cpe/test_data/2022-03-22">題目</a></p><p>第二次去考沒花太多時間準備(學業好忙Σ(lliдﾟﾉ)ﾉ)，只有在幾個禮拜前把常見資料結構在熟悉一下而已，前面一個半小時解出前四題，個人感覺這次似乎友善一點(?，我看計分板好多人都是四題;最後的時間都在想第六題ww，有找出題目的規律，我用vector去做，結果最後跑到vector爆掉，存不下東西…，顯然不能像我這樣做，我的程式跑人工測資要跑7秒lol…，anyway 至少有進步一題(還是好菜… 認識有資工系大一就七題… 😬 下一次再看情況要不要考，偶爾去燒個腦袋好像也不錯(誤</p><h3 id="成績紀錄"><a class="markdownIt-Anchor" href="#成績紀錄"></a> 成績紀錄</h3><table><thead><tr><th>考試日期</th><th>解題數</th><th>排名</th><th>排名比例</th><th>評等</th></tr></thead><tbody><tr><td>2021-12-21 (第一次)</td><td>3 / 7</td><td>161 / 2459</td><td>6.5%</td><td>進階級：熟悉程式設計的邏輯概念，能以程式克服一般常見的問題。</td></tr><tr><td>2021-03-22 (第二次)</td><td>4 / 7</td><td>118 / 2561</td><td>4.6%</td><td>專業級：熟悉各種基礎的演算法、資料結構，並具有良好的程式編寫能力。</td></tr></tbody></table><p><em>last updated 22/03/26 11:42</em></p>]]></content>
    
    
    <categories>
      
      <category>心得</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 Hexo + Github 架設自己的第一個網站</title>
    <link href="/2021/12/19/first-website/"/>
    <url>/2021/12/19/first-website/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>從很久以前就有創自己靜態網頁的想法，但總是因為覺得困難或麻煩而沒去研究，這次剛好有空閒時間，就來研究一下。</p><p>雖然網路上已經有很多相關文章了，但這邊還是將過程記錄下來打成文章。</p><h1 id="為何hexo-x-github"><a class="markdownIt-Anchor" href="#為何hexo-x-github"></a> 為何Hexo x Github</h1><p>Hexo官網寫著<strong>快速、簡單且強大的網誌框架</strong>，而也確實如此，全自動部署，簡潔、輕便，主題樣式及美觀我認為比競爭者Hugo好上不少，學會一些常用指令就能上手了，即便前端零基礎。</p><p>Github好處就是免費、架站快速、穩定，後期也可以自訂網域，當然有些限制:</p><ul><li>網站大小 &lt; 1GB</li><li>流量限制 &lt; 100GB/月</li><li>建置次數 &lt; 10次/時</li></ul><p>但作為一個自己的靜態部落格，應該還夠用。</p><h1 id="開始建置環境"><a class="markdownIt-Anchor" href="#開始建置環境"></a> 開始建置環境</h1><p>需安裝/註冊的東西:</p><ul><li>Node.js</li><li>Git</li><li>Hexo</li><li>註冊Github帳號</li><li>一個存放網站檔案的資料夾</li></ul><h2 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> Node.js</h2><p>提供使用 npm 來安裝套件。<br />下面去<a href="https://nodejs.org/en/">Node.js</a>官網，點擊左邊穩定版本下載即可。<br /><img src="/img/nodejs.png" alt="Node.js官網下載" /></p><h2 id="git"><a class="markdownIt-Anchor" href="#git"></a> Git</h2><p>用來取得Github的檔案及將檔案發佈到Github。<br /><img src="/img/git.jpg" alt="Git官網下載" /></p><h2 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h2><p>完成上述兩個安裝後，就可以安裝Hexo了。</p><p>在這裡，我在桌面新創建一個First-website的資料夾做示範。<br /><img src="/img/image_2022-02-08_23-06-53.png" alt="新增資料夾" /></p><p>打開終端機，cd到剛剛創建的資料夾</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Desktop\First-website<br></code></pre></div></td></tr></table></figure><p>接著輸入安裝指令:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-cli -g (mac可能需要sudo)<br></code></pre></div></td></tr></table></figure><p>接著，輸入初始化指令:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init<br></code></pre></div></td></tr></table></figure><p>安裝所需檔案:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install<br></code></pre></div></td></tr></table></figure><p>接著會在所在資料夾看到以下檔案，如果有的話，目前為止都是對的。<br /><img src="/img/file.png" alt="檢查資料夾是否有這些檔案" /></p><p>這個時候，在黑窗輸入:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo server<br></code></pre></div></td></tr></table></figure><p>如果黑窗跳出這段訊息:<br /><img src="/img/hexos.png" alt="" /></p><p>去瀏覽器訪問http://localhost:4000/ 就會看到你目前已經建置好一個網頁了!<br /><img src="/img/landscape.jpg" alt="" /></p><h1 id="認識github-page"><a class="markdownIt-Anchor" href="#認識github-page"></a> 認識Github Page</h1><p><a href="https://github.com/">Github</a>為世界上最大的代碼存放網站和開源社群，而<strong>Github Page</strong>是GitHub提供的一個網頁代管服務，可以用於存放<strong>靜態網頁</strong>，例如:部落格、專案文件甚至整本書。一般GitHub Pages的網站使用github.io的子域名(<a href="http://username.github.io">username.github.io</a>)，但是使用者也可以使用第三方域名。</p><p>基於Github的穩定性及不用付費，將個人Blog架設在Github Page是最方便快速的方法之一。</p><h2 id="創立github-page"><a class="markdownIt-Anchor" href="#創立github-page"></a> 創立Github Page</h2><p>如果還沒有github帳號的，自己去註冊一個然後登入，這邊我就不講解了。</p><h3 id="建立repository"><a class="markdownIt-Anchor" href="#建立repository"></a> 建立Repository</h3><p>在github左上角，點new 新增一個repository。<br /><img src="/img/image_2022-02-08_23-15-44.png" alt="新增repo" /></p><p>repo名稱輸入[<a href="http://xn--username-im2mg83jo57cy0yb.github.io">你的帳號username.github.io</a>]<br /><img src="/img/image_2022-02-08_23-17-27.png" alt="" /></p><p>建立完後，username.github.io就是你的網域了。</p><h3 id="將網站部屬至github"><a class="markdownIt-Anchor" href="#將網站部屬至github"></a> 將網站部屬至github</h3><ol><li>首先要安裝hexo的git插件，在終端輸入:</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><ol start="2"><li>接著需要修改_config.yml檔案(\Desktop\First-website_config.yml)的deploy設定。</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/username/username.github.io.git<br>  branch: master<br></code></pre></div></td></tr></table></figure><ul><li>type: 部屬方式，這裡選擇git</li><li>repo: repository的網址</li><li>branch: 部屬分支，這裡選擇master</li></ul><ol start="3"><li>部屬</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo deploy<br></code></pre></div></td></tr></table></figure><p>第一次部屬會要求登入github帳號。<br />部屬後，過個幾分鐘去你的網域看就能看到你的網站了，而到這基本上就完成網站架設了。</p><h1 id="常用指令"><a class="markdownIt-Anchor" href="#常用指令"></a> 常用指令</h1><ul><li>新增文章</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></div></td></tr></table></figure><ul><li>清除靜態檔案</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean (可簡寫 cl)<br></code></pre></div></td></tr></table></figure><ul><li>產生靜態檔案</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo generate (可簡寫 g)<br></code></pre></div></td></tr></table></figure><ul><li>本地端運行</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo server (可簡寫 s)<br></code></pre></div></td></tr></table></figure><p>更改文章後，可先在本地端運行看看。</p><p>一般來說，每次更新文章要重新佈署時，會打以下指令:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo cl<br>hexo g -d<br></code></pre></div></td></tr></table></figure><h1 id="結語"><a class="markdownIt-Anchor" href="#結語"></a> 結語</h1><p>實際使用到現在，hexo真的十分方便，指令不複雜，而且也有許多主題及插件可以使用。這算是我的第一篇文章，有打錯地方還請提醒，以後再慢慢豐富自己網站，</p><h2 id="參考文章"><a class="markdownIt-Anchor" href="#參考文章"></a> 參考文章</h2><ul><li><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌</a></li><li><a href="https://israynotarray.com/hexo/20190411/932826160/">架設 Hexo+GitHub</a></li></ul><p><em>last updated 22/02/08 23:52</em></p>]]></content>
    
    
    <categories>
      
      <category>網站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>photos</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<center>！相册描述【此行可删除】</center><center>自定义分隔符【此行可删除】</center><div class="gallery-page"><div class="gallery-list"><div class="gallery-column"><div class="gallery-item"><a href="【！相册文件夹名】"><img src="https://lh3.googleusercontent.com/enN96UPjBRdp7CYIkqo6p79O0aBJ-6UqEZNg80WB6nylLaDOlIreJTQwoVJ3UcKrcvUW3CyjvrkjfBFN2ZjvG5hb3iyupwQ2IqgmXWY7eh1hJ97WE3sAUnPThMbQTYd_q02AiKKDcsDKrARpHI--LrwxmC6sxt2Zvkt93Eggx0N79lEwr8UcB6YOBea81liIQ-TXEKntgCkwAARLW4LuaPXQYlQQvHTXHlp0mAEUl8mROreIymS6Aw77ter-fDlIi3U3HroOJUTMMkyzaAek9cqFO2jrh525KObfqGC2f7eKfLc-NLe8G1q4Cajufa4SfJ54zW2ZAQhRbmSIGVq0ioUuMYTbIOmHpGiYUxA_CE8RJixNHBlhKOTGoyfqMRQNZvR4l5259ZpDWqzXcuTV6t3HIZdfqpj0GSkyWpPNs5cy3VUckvcYxCTra8b7M-RHX0I0QxAQMvSSwLpvjxMFGa4osskrU04fd_wGxxyzh8M38VZJv8jpw7Z_4fsryl-iI4KahmmbNmHt6wsRBzHHUZN5rPWn_TcpO_fP_-s8heU1x38ZPyAC2Hb20WsfVwib_9jMOtWxjt_M97o4_nCRzUtYuTCwHY3aAPTp6w5MLG8t-ZCSvCViFuB2SwUnGfecnssb8MIl2R9rmizNI-4JtLMa5OT5AUotPIBAzsXZqWE_QCrOuGWTp4u2jR9DeNAsI_OGojppr7RMdEC5aZAyPI3jww=w1080-h607-no?authuser=0"></a><p>- 台北 -</p></div><div class="gallery-item"><a href="【！相册文件夹名】"><img src="https://lh3.googleusercontent.com/enN96UPjBRdp7CYIkqo6p79O0aBJ-6UqEZNg80WB6nylLaDOlIreJTQwoVJ3UcKrcvUW3CyjvrkjfBFN2ZjvG5hb3iyupwQ2IqgmXWY7eh1hJ97WE3sAUnPThMbQTYd_q02AiKKDcsDKrARpHI--LrwxmC6sxt2Zvkt93Eggx0N79lEwr8UcB6YOBea81liIQ-TXEKntgCkwAARLW4LuaPXQYlQQvHTXHlp0mAEUl8mROreIymS6Aw77ter-fDlIi3U3HroOJUTMMkyzaAek9cqFO2jrh525KObfqGC2f7eKfLc-NLe8G1q4Cajufa4SfJ54zW2ZAQhRbmSIGVq0ioUuMYTbIOmHpGiYUxA_CE8RJixNHBlhKOTGoyfqMRQNZvR4l5259ZpDWqzXcuTV6t3HIZdfqpj0GSkyWpPNs5cy3VUckvcYxCTra8b7M-RHX0I0QxAQMvSSwLpvjxMFGa4osskrU04fd_wGxxyzh8M38VZJv8jpw7Z_4fsryl-iI4KahmmbNmHt6wsRBzHHUZN5rPWn_TcpO_fP_-s8heU1x38ZPyAC2Hb20WsfVwib_9jMOtWxjt_M97o4_nCRzUtYuTCwHY3aAPTp6w5MLG8t-ZCSvCViFuB2SwUnGfecnssb8MIl2R9rmizNI-4JtLMa5OT5AUotPIBAzsXZqWE_QCrOuGWTp4u2jR9DeNAsI_OGojppr7RMdEC5aZAyPI3jww=w1080-h607-no?authuser=0"></a><p>- ！相册2 -</p></div></div><div class="gallery-column"><div class="gallery-item"><a href="sample"><img src="https://lh3.googleusercontent.com/enN96UPjBRdp7CYIkqo6p79O0aBJ-6UqEZNg80WB6nylLaDOlIreJTQwoVJ3UcKrcvUW3CyjvrkjfBFN2ZjvG5hb3iyupwQ2IqgmXWY7eh1hJ97WE3sAUnPThMbQTYd_q02AiKKDcsDKrARpHI--LrwxmC6sxt2Zvkt93Eggx0N79lEwr8UcB6YOBea81liIQ-TXEKntgCkwAARLW4LuaPXQYlQQvHTXHlp0mAEUl8mROreIymS6Aw77ter-fDlIi3U3HroOJUTMMkyzaAek9cqFO2jrh525KObfqGC2f7eKfLc-NLe8G1q4Cajufa4SfJ54zW2ZAQhRbmSIGVq0ioUuMYTbIOmHpGiYUxA_CE8RJixNHBlhKOTGoyfqMRQNZvR4l5259ZpDWqzXcuTV6t3HIZdfqpj0GSkyWpPNs5cy3VUckvcYxCTra8b7M-RHX0I0QxAQMvSSwLpvjxMFGa4osskrU04fd_wGxxyzh8M38VZJv8jpw7Z_4fsryl-iI4KahmmbNmHt6wsRBzHHUZN5rPWn_TcpO_fP_-s8heU1x38ZPyAC2Hb20WsfVwib_9jMOtWxjt_M97o4_nCRzUtYuTCwHY3aAPTp6w5MLG8t-ZCSvCViFuB2SwUnGfecnssb8MIl2R9rmizNI-4JtLMa5OT5AUotPIBAzsXZqWE_QCrOuGWTp4u2jR9DeNAsI_OGojppr7RMdEC5aZAyPI3jww=w1080-h607-no?authuser=0"></a><p>- 相册名 -</p></div></div><div class="gallery-column"><div class="gallery-item"><a href="sample"><img src="img/sample.jpg"></a><p>- 相册名 -</p></div></div></div></div></div><center>自定义分割线【此行可删除】</center>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>關於</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<div name="我是墙" id="recent-posts">  <!-- id=>type  recent-posts=>name    -->  <div name="我是画框">    <div name="我是纸">      <!--这里通过js挂载githubcalendar，也就是画画-->    </div>  </div></div><h3 id="嗨我是jin一名台灣的大學生"><a class="markdownIt-Anchor" href="#嗨我是jin一名台灣的大學生"></a> 嗨👋，我是Jin，一名台灣的大學生。</h3><p>文章主要是給自己看的解題紀錄或課程筆記，以後忘了比較容易複習。</p><h2 id="技能點"><a class="markdownIt-Anchor" href="#技能點"></a> 💻技能點</h2><ul><li><img src="https://img.shields.io/badge/C-A8B9CC?style=for-the-badge&logo=c&logoColor=white">     <img src="https://img.shields.io/badge/C++-blue?style=for-the-badge&logo=c%2B%2B&logoColor=white">    <img src="https://img.shields.io/badge/Python-c2BC44?style=for-the-badge&logo=python&logoColor=white">     <img src="https://img.shields.io/badge/Java-007396?style=for-the-badge&logo=Java&logoColor=ffffff"></li><li><img src="https://img.shields.io/badge/Windows-11-2376bc?style=for-the-badge&logo=windows&logoColor=ffffff">  <img src="https://img.shields.io/badge/Ubuntu-18.04-E95420?style=for-the-badge&logo=ubuntu&logoColor=ffffff"></li></ul><h2 id="技能點-2"><a class="markdownIt-Anchor" href="#技能點-2"></a> 🎮技能點</h2><ul><li><img src="https://img.shields.io/badge/Minecraft-62B47A?style=for-the-badge&logo=Minecraft&logoColor=ffffff">  <img src="https://img.shields.io/badge/Valorant-red?style=for-the-badge&logo=Velog&logoColor=ffffff"></li></ul><h2 id="16pf"><a class="markdownIt-Anchor" href="#16pf"></a> 16PF</h2><details>    <summary>結果分析圖</summary>      <img src="/img/photo_2022-03-29_00-05-20.jpg"></details><details>    <summary>“提倡者” 人格</summary>      提倡者人格类型的人非常稀少，只有不到 1% 的人口属于这种类型。具有与生俱来的理想主义和道德感，但真正令他们与其他理想主义人格类型区分开来的是，他们果断决绝。他们的同事和朋友把他们当作安静的外向类型是不无道理的，但他们要知道“提倡者”们需要独处的时间来养精蓄锐，所以对他们的突然离开不要太过惊讶。 “提倡者”们很在乎别人的感受，也希望被以同样的方式对待 — 这有时需要给他们留几天独处的时间。</details><p>本部落格創建於2021/12/19，歡迎加友鏈!</p><p><a href="/2021/01/26/diary/">日誌</a></p><script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=5sbh3ssy88n&amp;m=7&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33&amp;bv=45" async="async"></script>]]></content>
    
  </entry>
  
  
  
</search>
